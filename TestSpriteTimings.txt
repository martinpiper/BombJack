; This tests sprite timings, specifically writing registers during horizontal raster line timings and the resultant display
; This is to specifically test flexible and arbitrary sprite multiplexing.
; Blank (address b$0000)
d0

; Char screen disable
d$90000102

; Old tile background colour
d$9e07017f
; Testing background colour from mode7 layer
d$a014017f
; Disable Mode7
d$a0150100
d$0


; Background tile disable, enable display
d$9e000120


; Clear background palette choice to 1f (high palette)
d$a01401ff

; Address auto-increment using data bits 16-31
+16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,+
<0,1,2,3,4,5,6,7,<

; Sprite data
; Write sprite data from 14_j07b.bin into RAM mapped at $2000 with EBS $10
s$20001000
<0,1,2,3,4,5,6,7,<14_j07b.bin

; Write sprite data from 15_l07b.bin into RAM mapped at $4000 with EBS $10
s$40001000
<0,1,2,3,4,5,6,7,<15_l07b.bin

; Write sprite data from 16_m07b.bin into RAM mapped at $8000 with EBS $10
s$80001000
<0,1,2,3,4,5,6,7,<16_m07b.bin

!PaletteData.txt

; Sprite enable, no 32x32 sprites
s$9a000100
b$10,b$00

; Write sprite register data into RAM mapped at $9820 with EBS $01
s$98200100

; Byte ordering
; frame
; palette
; Rotated
; x
; y
; Normal
; y (inverted)
; x

; X pos group
b$1f,b$00,b$d0,b$10
b$1f,b$41,b$d1,b$21
b$1f,b$82,b$d2,b$32
b$1f,b$c3,b$d3,b$43

b$1f,b$00,b$b0,b$20
b$1f,b$41,b$b1,b$31
b$1f,b$82,b$b2,b$42
b$1f,b$c3,b$b3,b$53

b$1f,b$00,b$90,b$30
b$1f,b$41,b$91,b$41
b$1f,b$82,b$92,b$52
b$1f,b$c3,b$93,b$63

d$0

; Clear background palette choice
d$a0140100
d$a01401ff

d$0
^-$01

d0
; Wait for the first half of the sprite slots, creates visible artefacts due to raster line schedule conflicts
;w$ff01ff00,$24018000
; Wait for the second half of the sprite slots, no visible artefacts
w$ff01ff00,$24004000
d$a0140112	; Indicate timing with a colour change
d$9a000100	; Disable sprites. We don't want these sprite slots in the schedule to use contention bytes while we write to the registers
s$98500100	; Second half of sprite registers

b$1f,b$00,b$70,b$40
b$1f,b$41,b$71,b$51
b$1f,b$82,b$72,b$62
b$1f,b$c3,b$73,b$73

b$1f,b$00,b$50,b$50
b$1f,b$41,b$51,b$61
b$1f,b$82,b$52,b$72
b$1f,b$c3,b$53,b$83

b$1f,b$00,b$30,b$60
b$1f,b$41,b$31,b$71
b$1f,b$82,b$32,b$82
b$1f,b$c3,b$33,b$93
; This delay is to allow enough elapsed time for the current potentially corrupt sprite to finish rendering
d0
d0
d0
d0
d0
d0
d0
d0
d$9a000110	; Enable sprites
d$a01401ff	; Indicate timing with a colour change

d$0
