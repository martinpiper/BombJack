; Instructions, can be combined
; Any Load is timed to pulse low on the PCINCR (cycle 5)
; Any MEWR is timed to pulse low on the PCINCR (cycle 6+0/1)
; Any Incr is timed at cycle 6+3, which means 3 cycles into the *next* instruction if active in the previous instruction. Effectively after any Load or MEWR pulses. This only happens if the instructions successfully transitions.
; Note Incr is not a pulse, like Load or MEWR, it has to be an edge transition to the next instruction. This means the Incr only happens when the next instruction does not have Incr.
kAPU_Reset_ADDRB1		= %00000000000000000000000000000001
kAPU_Reset_PC			= %00000000000000000000000000000010
kAPU_InternalMEWR		= %00000000000000000000000000000100
kAPU_WaitForEqualsHV	= %00000000000000000000000000001000
kAPU_Incr_ADDRB1		= %00000000000000000000000000100000
kAPU_Incr_EADDR			= %00000000000000000000000001000000
kAPU_ExternalMEWR		= %00000000000000000000000010000000

; 8th bit
kAPU_Load_EBS			= %00000000000000000000000100000000
kAPU_Load_EADDRLo		= %00000000000000000000001000000000
kAPU_Load_EADDRHi		= %00000000000000000000010000000000
kAPU_Load_Wait24		= %00000000000000000000100000000000
kAPU_Load_Wait16		= %00000000000000000001000000000000
kAPU_Load_Wait8			= %00000000000000000010000000000000

; New instructions
kAPU_SelectEBS2EADDR2	= %00000000000000000100000000000000
kAPU_Load_EBS2			= %00000000000000001000000000000000
; 16th bit
kAPU_Load_EADDR2Lo		= %00000000000000010000000000000000
kAPU_Load_EADDR2Hi		= %00000000000000100000000000000000
kAPU_Incr_EADDR2		= %00000000000001000000000000000000

; Do not combine these IDataSelect values
kAPU_IDataSelectRAM			= %00000000000000000000000000000000
kAPU_IDataSelectReg0		= %00000000000010000000000000000000
kAPU_IDataSelectReg1		= %00000000000100000000000000000000
kAPU_IDataSelectReg2		= %00000000000110000000000000000000
kAPU_IDataSelectReg3		= %00000000000000000000000000010000
kAPU_IDataSelectMemAddReg3	= %00000000000010000000000000010000
kAPU_IDataSelectReg3AddReg4	= %00000000000100000000000000010000
kAPU_IDataSelectReg3SubReg4	= %00000000000110000000000000010000
kAPU_IDataSelectMask		= %00000000000110000000000000010000

kAPU_IDataRegLoad0		= %00000000001000000000000000000000
kAPU_IDataRegLoad1		= %00000000010000000000000000000000
kAPU_IDataRegLoad2		= %00000000100000000000000000000000

; 24th bit
kAPU_ADDRB2Select		= %00000001000000000000000000000000
kAPU_Incr_ADDRB2		= %00000010000000000000000000000000
kAPU_ADDRB1Load16		= %00000100000000000000000000000000		; 16 bits from r0r1
kAPU_ADDRB2Load16		= %00001000000000000000000000000000		; 16 bits from r0r1
kAPU_PCLoad16			= %00010000000000000000000000000000		; 16 bits from r0r1
kAPU_SkipIfEQ			= %00100000000000000000000000000000		; This is timed earlier in the instruction cycle, however for safety during instruction retries kAPU_IDataSelect should be the same as the previous instruction
kAPU_IDataRegLoad3		= %01000000000000000000000000000000
kAPU_IDataRegLoad4		= %10000000000000000000000000000000


kBus24Bit_APU_EBBS			= $02
kBus24Bit_APU_Control		= $2000
kBus24Bit_APU_Data			= $4000
kBus24Bit_APU_Instructions	= $8000


kAPU_InstructionSize	= 4
!macro MAPU .i {
!previouscontext

!ifdef kAPU_previousInstruction {

!if .i & kAPU_WaitForEqualsHV {
!if kAPU_previousInstruction & (kAPU_ExternalMEWR | kAPU_InternalMEWR) {
!if .i & (kAPU_ExternalMEWR | kAPU_InternalMEWR) {
	!error "kAPU_WaitForEqualsHV should not write internal or external memory in the current or previous instruction"
}
}
}


!if kAPU_previousInstruction & kAPU_Incr_ADDRB1 {
!if .i & kAPU_Incr_ADDRB1 {
	!error "Consecutive kAPU_Incr_ADDRB1 detected"
}
}
!if kAPU_previousInstruction & kAPU_Incr_ADDRB2 {
!if .i & kAPU_Incr_ADDRB2 {
	!error "Consecutive kAPU_Incr_ADDRB2 detected"
}
}
!if kAPU_previousInstruction & kAPU_Incr_EADDR {
!if .i & kAPU_Incr_EADDR {
	!error "Consecutive kAPU_Incr_EADDR detected"
}
}
!if kAPU_previousInstruction & kAPU_Incr_EADDR2 {
!if .i & kAPU_Incr_EADDR2 {
	!error "Consecutive kAPU_Incr_EADDR2 detected"
}
}
}

!set kAPU_previousInstruction = .i

	!by <(.i)
	!by <(.i >> 8)
	!by <(.i >> 16)
	!by <(.i >> 24)
}
!macro MAPU {
!previouscontext
+MAPU 0
}

!macro MAPU_LoadEBSFromB1 {
	+MAPU kAPU_Load_EBS
	+MAPU kAPU_Incr_ADDRB1
}

!macro MAPU_LoadEADDRFromB1 {
	+MAPU kAPU_Load_EADDRLo
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_Load_EADDRHi
	+MAPU kAPU_Incr_ADDRB1
}

!macro MAPU_LoadEADDR2FromB1 {
	+MAPU kAPU_Load_EADDR2Lo
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_Load_EADDR2Hi
	+MAPU kAPU_Incr_ADDRB1
}

!macro MAPU_LoadDoWait {
	+MAPU kAPU_Load_Wait8
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_Load_Wait16
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_Load_Wait24
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_WaitForEqualsHV
}

!macro MAPU_TestAndJump {
	+MAPU kAPU_IDataRegLoad0
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_IDataRegLoad1
	+MAPU kAPU_Incr_ADDRB1
	; Needed because of the kAPU_Incr_ADDRB1 executing during the kAPU_SkipIfEQ test
	+MAPU
	+MAPU kAPU_SkipIfEQ | kAPU_PCLoad16
	+MAPU kAPU_Incr_ADDRB1
}

!macro MAPU_ProcessRasterWord {
	+MAPU_LoadEADDRFromB1
	+MAPU kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1 | kAPU_Incr_EADDR
	+MAPU kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1
}

!macro MAPU_ProcessRasterByte {
	+MAPU_LoadEADDRFromB1
	+MAPU kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1
}

!macro MAPU_ProcessRasterByteEADDR2 {
	+MAPU_LoadEADDR2FromB1
	+MAPU kAPU_ExternalMEWR | kAPU_SelectEBS2EADDR2
	+MAPU kAPU_Incr_ADDRB1
}


!macro MAPU_SetDataUpdateBus .label {
	lda #kBus24Bit_APU_EBBS
	+MWordValueTo_XY kBus24Bit_APU_Data + .label - APUData_Start
	jsr Bus24Bit_SetAddressBus
}

!macro MAPU_DataUpdate16Bits .label {
	+MAPU_SetDataUpdateBus .label
	lda .label
	sta CIA2PortBRS232
	lda .label+1
	sta CIA2PortBRS232
}
!macro MAPU_DataUpdateNumBytes .label , .num {
	+MAPU_SetDataUpdateBus .label
	!for .i , .num {
		lda .label + .i -1
		sta CIA2PortBRS232
	}
}



!macro MAPU_EmitPC .address {
	+MLittleEndian16Bit .address/kAPU_InstructionSize
}

!macro MAPU_EmitWait .xpos , .ypos {
	+MLittleEndian16Bit .xpos
	!by .ypos
}


kMAPUEmitChangePaletteIndexHSyncAdjust = 32
!macro MAPUEmitChangePaletteIndex .index , .r , .g , .b {
	+MLittleEndian16Bit kBus24Bit_VideoLayer_Palette + (.index*2)
	+MBus24Bit_MakePaletteRGB .r , .g , .b
}
!macro MAPUEmitChangeXScroll ~.addr {
	+MLittleEndian16Bit kBus24Bit_TileScreen_ScrollX16
.addr = *
	+MLittleEndian16Bit 0
}
!macro MAPUEmitChangeXScrollChars ~.addr {
	+MLittleEndian16Bit kBus24Bit_CharScreen_ScrollX16
.addr = *
	+MLittleEndian16Bit 0
}

!macro MAPU_VideoLayer_EmitPriority_NearToFar_A .near , .middleNear , .middleFar , .far {
	!by (.far << 6) | (.middleFar << 4) | (.middleNear << 2) | .near
}


!macro MAPUAvoidRastersTableEntry .tstart , .tend {
!if .tstart > .tend {
	!error "MAPUAvoidRastersTableEntry problem"
}
!for .i , ((.tend + 1) + 10) - (.tstart-5) {
!set .tpos = .tstart + .i-1
; For MAPUAvoidRastersTest: Comment out the next line to simply remove the table creation
;	sta APUAvoidRastersTable + (255 - <(.tpos))
}
}

!macro MAPUAvoidRastersTest {
; For MAPUAvoidRastersTest: Comment out the next line to simply remove the test
;	jsr APUAvoidRasters
}
