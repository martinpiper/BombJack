!zn
; Initialise the bus
Bus24Bit_Init
	; Setup PA2 for writing
	lda #%100
	sta CIA2PortADDR

	; Setup output of 8 bits
	lda #$ff
	sta CIA2PortBDDR
	
	jsr Bus24Bit_Reset
	; Send zero bytes for the bus and data
	lda #0
	sta CIA2PortBRS232
	sta CIA2PortBRS232
	sta CIA2PortBRS232
	sta CIA2PortBRS232
	jsr Bus24Bit_Reset
	rts


; Resets the 24 bit bus
Bus24Bit_Reset
	; Reset the state input again
	lda #%000
	sta CIA2PortASerialBusVICBank
	lda #%100
	sta CIA2PortASerialBusVICBank
	rts


; A/X = lo/hi address
; Y = length
Bus24Bit_CopySmallData
	sta .sm1+1
	stx .sm1+2
Bus24Bit_CopySmallDataAgainWithSize
	sty .sm2+1
Bus24Bit_CopySmallDataAgain
	ldy #0
.l1
.sm1	lda $1234
	sta CIA2PortBRS232
	; We do this instead of indexing the above LDA with Y so that repeated requests will continue on from where the last position was
	inc .sm1+1
	bne .l3
	inc .sm1+2
.l3
	iny
.sm2	cpy #0
	bne .sm1
	rts

Bus24Bit_CopySmallDataRepeatForX
	jsr Bus24Bit_CopySmallDataAgain
	dex
	bne Bus24Bit_CopySmallDataRepeatForX
	rts


; A = EBBS
; X/Y = lo/hi address
Bus24Bit_SetAddressBus
	pha
	jsr Bus24Bit_Reset
	pla
	sta CIA2PortBRS232
	stx CIA2PortBRS232
	sty CIA2PortBRS232
	rts
