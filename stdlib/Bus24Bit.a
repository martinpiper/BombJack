!zn
; Initialise the bus
Bus24Bit_Init
	; Setup PA2 for writing
	lda #%100
	sta CIA2PortADDR

	; Setup output of 8 bits
	lda #$ff
	sta CIA2PortBDDR
	
	jsr Bus24Bit_Reset
	; Send zero bytes for the bus and data
	lda #0
	sta CIA2PortBRS232
	sta CIA2PortBRS232
	sta CIA2PortBRS232
	sta CIA2PortBRS232
	jsr Bus24Bit_Reset
	rts


!if 0 {
; Corresponds to user port breakout V1.1
Bus24Bit2_Init
	; Setup PA2 and SERIALATN for writing
	; Bit 2: RS232 TXD line, output bit.
	; Bit 3: Serial bus ATN OUT; 0 = High; 1 = Low.
	lda #%00001100
	sta CIA2PortADDR

	; Setup output of 8 bits
	lda #$ff
	sta CIA2PortBDDR

	; Test pattern, write the strobe value into strobe 1 bit into CIA2PortB, and then CIA2PortA to see what we can reliably set
	ldx #0
.tl0
	; Easy debug write trigger
	stx CIA2PortBRS232

	; Strobe PA2 and SERIALATN
	; NOTE: PA2 is not inverted. SERIALATN is inverted.
	lda #%0000
	sta CIA2PortBRS232
	sta CIA2PortASerialBusVICBank
	lda #%0100
	sta CIA2PortBRS232
	sta CIA2PortASerialBusVICBank
	lda #%1000
	sta CIA2PortBRS232
	sta CIA2PortASerialBusVICBank
	lda #%1100
	sta CIA2PortBRS232
	sta CIA2PortASerialBusVICBank
	lda #%0000
	sta CIA2PortBRS232
	sta CIA2PortASerialBusVICBank

	; This pulses SP2
	; NOTE: SP2 is inverted
	; The nop is to show timing in the captured data
	lda #%01000000
	sta CIA2PortBRS232
	sta CIA2TimerAControl
	lda #0
	sta CIA2PortBRS232
	sta CIA2TimerAControl
	nop
	nop
	nop
	lda #%01000000
	sta CIA2PortBRS232
	sta CIA2TimerAControl
	lda #0
	sta CIA2PortBRS232
	sta CIA2TimerAControl
	nop
	nop
	nop
	lda #%01000000
	sta CIA2PortBRS232
	sta CIA2TimerAControl
	lda #0
	sta CIA2PortBRS232
	sta CIA2TimerAControl
	nop
	nop
	nop

	; This pulses SP1
	; NOTE: SP1 is inverted
	lda #%01000000
	sta CIA2PortBRS232
	sta CIA1TimerAControl
	lda #0
	sta CIA1TimerAControl
	nop
	nop
	nop
	lda #%01000000
	sta CIA2PortBRS232
	sta CIA1TimerAControl
	lda #0
	sta CIA2PortBRS232
	sta CIA1TimerAControl
	nop
	nop
	nop
	lda #%01000000
	sta CIA2PortBRS232
	sta CIA1TimerAControl
	lda #0
	sta CIA2PortBRS232
	sta CIA1TimerAControl
	nop
	nop
	nop


	; Setup input of 8 bits for reading, _PC is also pulsed just like when writing
	lda #0
	sta CIA2PortBDDR
	lda CIA2PortBRS232
	lda CIA2PortBRS232
	lda CIA2PortBRS232
	lda CIA2PortBRS232
	; Setup output of 8 bits
	lda #$ff
	sta CIA2PortBDDR

	inx
	jmp .tl0

	
	jsr Bus24Bit_Reset

	; Send zero bytes for the bus and data
	lda #0
	sta CIA2PortBRS232
	sta CIA2PortBRS232
	sta CIA2PortBRS232
	sta CIA2PortBRS232
	jsr Bus24Bit_Reset
	rts
}


; Resets the 24 bit bus
Bus24Bit_Reset
	; Reset the state input again
	lda #%000
	sta CIA2PortASerialBusVICBank
	lda #%100
	sta CIA2PortASerialBusVICBank
	rts


Bus24Bit_WriteMakeSafe !by 0
Bus24Bit_WriteMakeSafeReset !by 0
; A/X = lo/hi address
; Y = length
Bus24Bit_CopySmallData
	sta .sm1+1
	stx .sm1+2
Bus24Bit_CopySmallDataAgainWithSize
	sty .sm2+1
Bus24Bit_CopySmallDataAgain
	ldy #0
.l1
	lda Bus24Bit_WriteMakeSafeReset
	beq .sm1

	lda Bus24Bit_WriteMakeSafe
	bne .skipWait
	jsr Video_WaitVBlank
	lda Bus24Bit_WriteMakeSafeReset
	sta Bus24Bit_WriteMakeSafe
.skipWait
	dec Bus24Bit_WriteMakeSafe

.sm1	lda $1234
	sta CIA2PortBRS232
	; We do this instead of indexing the above LDA with Y so that repeated requests will continue on from where the last position was
	inc .sm1+1
	bne .l3
	inc .sm1+2
.l3
	iny
.sm2	cpy #0
	bne .l1
	; Prepare any subsequent copies to copy a 256 byte chunk
	lda #0
	sta .sm2+1
	rts

; A/X = lo/hi address
; Y = length
Bus24Bit_FastCopySmallData
	sta .fcsm1+1
	stx .fcsm1+2
Bus24Bit_FastCopySmallDataAgain
.fcl1
.fcsm1	lda $1234
	sta CIA2PortBRS232
	; We do this instead of indexing the above LDA with Y so that repeated requests will continue on from where the last position was
	inc .fcsm1+1
	bne .fcl3
	inc .fcsm1+2
.fcl3
	dey
	bne .fcl1
	rts



!zn
Bus24Bit_CopySmallDataRepeatForX
	; Safety checks
	cpx #1
	bpl .cl1
	rts
.cl1
	jsr Bus24Bit_CopySmallDataAgain
	dex
	bne .cl1
	rts


!zn
Bus24Bit_FastCopySmallDataRepeatForX
	; Safety checks
	cpx #1
	bpl .cl1
	rts
.cl1
	jsr Bus24Bit_FastCopySmallDataAgain
	dex
	bne .cl1
	rts


!zn
Bus24Bit_WriteAForY
.cl1
	sta CIA2PortBRS232
	dey
	bne .cl1
	rts

!zn
Bus24Bit_WriteAForYThenX
.cl1
	jsr Bus24Bit_WriteAForY
	dex
	bne .cl1
	rts

!zn
; A = EBBS
; X/Y = lo/hi address
Bus24Bit_SetAddressBus
	pha
	jsr Bus24Bit_Reset
	pla
	sta CIA2PortBRS232
	stx CIA2PortBRS232
	sty CIA2PortBRS232
	rts
