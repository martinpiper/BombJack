* Audio 9.2 board
	Was working fine.
	> But after being stored for a while it developed a crackle, on all four voices.
	> Only when playing sounds, otherwise when silent the voice is OK.
	> Removed all other boards (except video), including APU. Same result, no change.
	> Tried filling the sample RAM with $80 (middle zero volume) and there are no crackles
		NOTE: ; For debug, fill audio with the same byte pattern
		> Can hear the RAM being filled
		Also filling the RAM with 0 causes a very short click to be heard when the voice is triggered from disabled, as expected
		Also filling with $4000 byte chunks of $00 $40 $80 $c0 generates the expected series of clicks when debug playing or debug looping the voices (with fire and direction)
		>> This indicates the RAMs are potentially fine, since they output expected data across their address range, but the output stage is perhaps crackling
		Volume EPROM reads OK
	>> Moving the board while plugged in seems to generate issues. Perhaps the connector on the audio board is loose?
		Removing audio and adding all the other video boards, no APU, back again shows Prototype3\Demo9_*.prg works as intended
		Except when pushing boards down in new backplane positions 3 Sprites2 and 4 Sprites, then there are weird issues with the sprites, sometimes they appear filled with the same colour...
			Are those positions experiencing a loose connection? If they are then the sprite RAMs could be activated which would generate a filled colour...
	>> This might be caused by the userport interface bug found here: V8.0\Sprites2 V8.0 Debug 2 c.LPF
		>>> Yes!  Fixing the userport interface fixed the audio crackle issue.




* Debugging the hardware flash on frame kSkipToFrameThenWaitForFire
	Note: kSkipToFrameThenWaitForFire means it is reproducible
	This doesn't happen in emulation
	The two player sprites are active, indicating it's not a global problem with the scaled sprites
	Also sending the data twice per frame on the trigger doesn't solve the issue and indicates it's not a communication problem ending the data on this particular frame
	> Tried forcing all active GameSpriteWorld_Z positions to be 96
		This shows that resetting the world Z coordinate of active objects stops the problem
		The question is then which particular object is causing the issue?
	Setting the sprite Y pixel size to always be 1 (; Y pixel size) stops the issue, but obviously doesn't render correctly...
		This seems to indicate that for some reason the Y extent check isn't performing as expected in hardware?
		Try clamping the Y pixel size values calculated in Sprite2Tab_ScaleYSize
			For values >=31 didn't stop the issue...
	Take the precise memory dump from the sprite registers and send that as the first frame in the hardware. See if it replicates the issue. Then modify the data until it resolves to understand what is the work around. 
		2B00 :  0A C4 20 A0 20 20 20 11   0A E4 20 A0 20 20 20 15
		2B10 :  08 6B 10 B4 20 40 40 09   08 82 0F 92 20 44 44 08
		2B20 :  08 68 0F B3 20 44 44 08   09 8F 0D C1 20 4E 4E 0E
		2B30 :  09 8F 0D CD 20 4E 4E 0F   08 52 0C 9D 20 55 55 08
		2B40 :  08 6F 0A C1 20 66 66 0A   08 7D 0A 9D 20 66 66 08
		2B50 :  0B 8B 09 A6 20 71 71 16   09 82 09 A6 20 71 71 14
		2B60 :  09 7A 09 A6 20 71 71 10   08 7F 09 C9 20 71 71 09
		2B70 :  08 82 07 C3 20 92 92 0B   08 82 07 CB 20 92 92 0C
		2B80 :  08 8A 07 C3 20 92 92 12   08 8A 07 CB 20 92 92 13
		2B90 :  0B 87 06 A8 20 AA AA 16   09 81 06 A8 20 AA AA 14
		2BA0 :  09 7B 06 A8 20 AA AA 10   00 00 00 00 00 00 00 00
		2BB0 :  00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00
		2BC0 :  00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00
		2BD0 :  00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00
		> So it's the data, why?
		With>
		GameSpriteData
			!by $0A ,$C4 ,$20 ,$A0 ,$20 ,$20 ,$20 ,$11   ,$0A ,$E4 ,$20 ,$A0 ,$20 ,$20 ,$20 ,$15
			!by $08 ,$6B ,>>$10<< ,$B4 ,$20 ,$40 ,$40 ,$09   ,$08 ,$82 ,$0F ,$92 ,$20 ,$44 ,$44 ,$08
		>>$10<< sprite Y pixel size is the issue, if it's $0f or $11 then the render is OK
			This could be due to the comparison check, ripple in the signals perhaps?
			Doesn't happen in simulation, even at 14.31818MHz for Sprites2
		> Could be two things. The Y size comparison ripple, which can be checked by having Y size = 16 consistently, or the Y size = 0 check triggering early
			Or maybe the inputs to the comparators for Y size are wrong? Need to check datasheet again...
			If it's ripple, it could be solved by adding an AND condition with the clock to trigger any comparison on a particular clock half
		>> Trying:
			+MSendScaledSprite 64 , 128 , 13
			+MSendScaledSprite 96 , 128 , 14
			+MSendScaledSprite 128 , 128 , 15
			+MSendScaledSprite 160 , 128 , 16
			+MSendScaledSprite 192 , 128 , 17
			+MSendScaledSprite 224 , 128 , 18
			>> This had no problem on hardware. Tried above original problem data, as there was an issue.... So...
			>> This showed that actually size Y 16 ($10) on its own is not causing the issue
		>> Note: ; Using a different Y pos (with the problem size Y of $10) fixed the issue?!!
			; So try different Y pos values...
			Testing all pos Y = 0 - 255 (for the orange rock) shows that only a small number of pos Y values with size Y = $10 causes issues...
		>> Moving the pos Y adjustment to the previous sprite (player legs) shows that a large number of Y pos cause issue for the next sprite (the orange rock), a small number fix the issue
			>> Wrong: Perhaps this was caused by timing the write during rendering?
		>>> This means the previous sprite can affect rendering of the next sprite?!
			Does this mean the combined Y extent calculation is failing or getting stuck?
				>> Using: ; So try different size Y
					> This shows a large number of different size Y values for the orange rock are mostly OK, it just happens to be a small number of values causing issues
			Does this happen with OSC and VIDCLK inputs?
				Yes, input clock rate does nto affect the issue at all
			> For the orange rock
				Default Y pos = 6b size Y = 10
			What Y pos values are causing this render issue?? (where the rest of the sprites, after the player top/legs, do not draw)
				67 6b 6d 6f e1 e3 e5 e6 e7 e9 ea eb ec ed ee ef
				Even with different player legs Y these numbers are the same
			What size Y values are causing this render issue??
				10
			>> These size Y values do not cause the render issue, but render only the orange rock with the incorrect height (size Y)
				14 (only render $4 rows)
				16 (only render $6 rows) Not consistent between multiple advances by single clicks of fire... WTF...
					Try disabling the layer then enabling it?
						No effect, still inconsistent. Which excludes hardware memory contention and C64 write timing due to extra bus24 setup cycles
				1c (only render $c rows)
				94 (only render $4 rows)
		The 74LS85 comparator seems to be OK: file:///C:/Downloads/74LS85.pdf
			Even if U333 A>B input is hi
	>> 74LS161 74LS163 74161 74163 https://www.ti.com/lit/ds/symlink/sn54ls161a-sp.pdf?ts=1675152985431&ref_url=https%253A%252F%252Fwww.google.com%252F
		74LS161 74161 has asynchronous clear
		74LS163 74163 has synchronous clear only on CLK
	* Debug hardware strategy... Using: "C:\work\BombJack\V8.0\Bomb Jack - Sprites2 - Routed.pdsprj"
		Mostly on: Root sheet 11
		>> Sprites2 V8.0 Debug 1
			Signal			IC		pin(s)
			S2_LOGICRESET	U384	6
			S2_RESETDRAW	U156	6
			S2_ENDOFLIST	U138	11
			S2SPRIA[0..3]	U316	14 13 12 11
			S2SIZEY[0..7]	U325	2 5 6 9 12 15 16 19
		> This is puzzling. So far: "C:\work\BombJack\V8.0\Sprites2 V8.0 Debug 1 a.LPF"
			This clearly shows the 0 is rendering, the 1 sprite is not (long and short times), as expected since they are vertically stacked.
			But the 2 sprite S2SIZEY is being reading as 0
		>> Going to need debug on: S2ISDB[0..7]	U325	3 4 7 8 13 14 17 18
			> When S2SPRIA=2 S2ISDB Clearly shows 08 6b 00 on the DB: "C:\work\BombJack\V8.0\Sprites2 V8.0 Debug 1 b.LPF"
				Even when preceding values are correct
		>> Going to need debug on:
			S2SPRSA[0..2]	U302	13 12 11
		> S2SPRIA=2 S2SPRSA=2 read size Y S2ISDB = 0 ?!! "C:\work\BombJack\V8.0\Sprites2 V8.0 Debug 1 c.LPF"
		>> Going to need debug on:
			S2_LDPALETTE	U303	15
			S2_LDSPRY		U303	13
			S2_LDSIZEY		U303	11
			> Which clearly shows (at cursor A) a nice stable S2SPRIA=2 S2SPRSA=2: "C:\work\BombJack\V8.0\Sprites2 V8.0 Debug 1 d.LPF"
				And a well timed (middle of the held value) RAM read, just the value is wrong
		>> Going to need debug on register SRAM
			S2ISAB[0..8]	U313	8 7 6 5 4 3 2 1 23
			And its WE				21
				U313 is hard to attach, try...
							U319	4 7 9 12
							U318	4 7 9 12
							U349	4
			Keep these signals:
				S2_LOGICRESET
				S2_RESETDRAW
				S2_ENDOFLIST
				S2SPRIA
				S2ISDB
				S2_LDPALETTE
				S2_LDSPRY
				S2_LDSIZEY
			> Which clearly shows at cursor A the SRAM address S2IASB is OK, the read value is still wrong?!
				"C:\work\BombJack\V8.0\Sprites2 V8.0 Debug 1 e.LPF"
		>> Going to need WE: Register RAM _WE
			Signal rising edge: Register RAM _WE
			> Which clearly shows at cursors A/B/C/D the SRAM write for S2ISAB=12 S2ISDB=0 which is the wrong value??!!
				"C:\work\BombJack\V8.0\Sprites2 V8.0 Debug 1 f.LPF"
		>> Try a software fudge to reset the address?
			This worked, when the address fudge was at kBus24Bit_Sprites2 + $12 but not at kBus24Bit_Sprites2 + $12
			WTF?!
			> Disable address fudge
			> Try delay
				Using: +MACRODelay_X 30
					> Which also worked. WTF?!
				Using: +MACRODelay_X 20
					> Which also worked
					"C:\work\BombJack\V8.0\Sprites2 V8.0 Debug 1 f.LPF"
		> Noticed during the register SRAM writes, sometimes S2_LDPALETTE is spiking from 0 to 1, could this be disrupting the write data?
			Unlikely, the latches are read only
		The Sprites2 layer is turned off, it does force S2_LOGICRESET=0 and then S2_RESETDRAW=0 and and S2_ENDOFLIST=1 and S2SPRIA[0..3]=0
			As expected
		> What delay timing value causes an issue then?
			Works (reliably): +MACRODelay_X 6
			Issue (unreliably): +MACRODelay_X 5
			Issue (reliably): +MACRODelay_X 4
		> Going to need to check DB[0..7] from the address bus at U317 pins 18 17 16 15 14 13 12 11
		> Going to need to check the address demux U319/U318/U349 _A/B S2_9200CS pin 1
		> Going to need to gather debug values from the address bus before the SRAM
		> Going to check the memory address header on the backplane and userport interface: "C:\WORK\BombJack\V8.0\Sprites2 V8.0 Debug 2 a.LPF"
			EA[0..15] EBS[0..7] _MEWR
			> Trigger +ve _MEWR and EAEBS[0..23] equal to 19212h
				Shows ED[0..7] = 0 which is wrong
			>> Is it because the userport is sending the wrong data? Maybe the control lines are sending something due to the serial shift register?
				> Try with the userport board disconnected: "C:\WORK\BombJack\V8.0\Sprites2 V8.0 Debug 2 b.LPF"
					Shows ED[0..7] = 0 which is wrong
					>> This would explain why the audio board is generating scratchy audio?!
			> How much of the data being sent is bad? Repeatedly send a known pattern 00 - ff: "C:\WORK\BombJack\V8.0\Sprites2 V8.0 Debug 2 c.LPF"
				Changed sample mode setup to be +ve CLK1 _MEWR
				Exporting the Data[0..31] data as CSV
				Comparing with C:\Work\C64\VideoHardware\target\debugData.txt
				After arranging the capture CSV file bytes to the debugData.txt format and setting the files to be upper case
				Using cmpare tool
				For around 1043 captures (lines in CSV) on trigger for 019212 does show these wrong values at regular intervals:
					00019280
					00019380
					00019480
					00019580
				>> What is the interval of the wrong values? Why?
					> Is this seen in just capturing the user port data bits?
					Adding 4 nops as delay
					92800100
					92C00180
					93800100
					93C00180
					94800100
					94C00180
					95800100
					95C00180
				> Is A being corrupted? Try using +MBus24Bit_Send8BitValueFromX with no nop delay
					No change, still bugged
		> Going to check the raw userport data now: "C:\WORK\BombJack\V8.0\Sprites2 V8.0 Debug 3 a.LPF"
			huh well the raw data bytes from the userport are fine
			There is a bit of signal fuzzing on the -ve edge of _PC but the userport interface latches should all be working on the +ve edge
				oh how wrong I am...
				The logic in UserPortTo24BitAddress.pdsprj is flawed, for ADDROUTLOAD, it tries to load on the -ve edge of _PC, after it was delay latched by the 4MHz clock
				Which, almost always is fine since there is enough gate delay to allow for the fuzzing signals
				But in the case of a transition from $7f to $80 there is slightly more signal fuzzing from the C64, where the period of the signals is settling, it's longer than the gate delay
				>> I should be trying to load on the +ve edge, not the -ve edge
					> The easiest bodge fix on the PCB is to use the other 7474 delay latch, which was unused. This would add a 250ns delay.
					> Luckily the output from delay latch U27:A pin 5 can be used for the input for U27:B pin 12
					>> The proper fix is to not use a NOR to select _PC and CS0/CS1/CS2/CS3
						The output (for the latch clk) should be held at 0, unless the correct _PC is being used
						CSX	_PC	Output
						0	0	0
						0	1	1
						1	0	0
						1	1	0
						= NOT a AND b
						>> Or held at 1, unless the correct _PC is being used
							CSX	_PC	Output
							0	0	0
							0	1	1
							1	0	1
							1	1	1
							= a OR b
							>> TODO: This held at 1 logic is better
						The U1 latch will need to advance only on the correct +ve edge of _PC, when not CS3, so... Held 1 logic
							CS3	_PC	Output
							0	0	1
							0	1	1
							1	0	0
							1	1	1
							= NOT a OR b
							* TODO: The above
			* Done: The test data for UserPortTo24BitAddressSimple.pdsprj needs to reflect the C64 clock timing compared to the 4MHz clock internally. Also the data setup is done on negative edge _PC, not before. Test data should reflect that.
				As shown by "C:\WORK\BombJack\V8.0\Sprites2 V8.0 Debug 3 a.LPF"
			> Added data recorder VSMDD1 writes memory data to: output\DebugUserPortTo24BitAddress.txt
				> The measured time between user port data byte changes (from the C64 sta/clc/adc #1/jmp update code) is 11.14us
				> The realistic minimum time is going to be an unrolled loop of lda#/sta which is 2+4 cycles, at 985248 Hz = ~0.000006 seconds
					or 164208 hz so use this for the new digital data
					Using 1M because we need to control _PC and PA2 at greater accuracy
			> Added data generator VSMDD2 for expected data test with testdata\DebugUserPortTo24BitAddress - Expected1.txt
			>> Adding a couple of extra AND gates for _PC seems to slow the signal enough for it to "work" on the old V1.3 PCB
				>> This is not a reliable fix however
			>> Success when connected to hardware including Sprites2 using Demo9 with debug code. The problematic size Y value is fixed.

				

			
	* TODO:
		* U302 ENT could take the result from before U384:C since it has an internal AND so no need the external AND into ENP
		* Check the comparators: < > least significant bit input is 0 and = input is 1
			Probably with the exception of the 32x32 sprite check?




* Properly fix the user port interface
	See previous debugging comment: "The logic in UserPortTo24BitAddress.pdsprj is flawed, for ADDROUTLOAD"...



			




* When using APU "And enable APU mode", the first Bus24Bit_Init will need an immediate APU_ResetDisable
	This is to ensure the APU is allowing RAM writes to the rest of the hardware




* APU: If there was a signal for "next instruction might need external bus" this could be used by the cached latched write proceed logic to stop a cached write before the real external write happens.
	In the current design we don't know if the *next* instruction will want the external bus, so we don't know when to time the cached write.
	Then the APU doesn't need to be paused while writing cached values, it only needs to write cached values when the current and next instructions do not have external/internal writes.
	This would need an extra signal however, which we currently don't have instruction RAM space for.




* Backplane: Solid relief for power pins
	Slot stack for the other power plug part? https://labcenter.s3.amazonaws.com/support/Slotted_Pad.webm
		2.62mm
		51.5th
		31th
		31th
		0
	Remember to choose Rounded Radius 12th
	Also make the slot stack width/height smaller like 1.9mm x 30th
	https://www.pcbway.com/pcb_prototype/Plated_through_slots.html
		The min side of plated slot is 0.5mm for PCBWay. For unplated slot, the min size is 0.8mm width. 




* User port: Expand this C64 user port breakout board to include the other data lines. Then I could add the ability to read RAM/registers from the video/audio expansion hardware.
	This would include the ability to read the result of external maths calculations...
	20/24 pins for the header?
		https://www.mouser.sg/c/connectors/headers-wire-housings/?application=Board-to-Cable&contact%20gender=Pin%20%28Male%29&m=Samtec&mounting%20angle=Straight&mounting%20style=Through%20Hole&number%20of%20positions=20%20Position~~26%20Position&number%20of%20rows=2%20Row&pitch=2.54%20mm&product=Headers&row%20spacing=2.54%20mm&termination%20style=Solder%20Pin&type=Shrouded&instock=y&rp=connectors%2Fheaders-wire-housings%7C~Number%20of%20Positions
		
	Cable? https://www.mouser.sg/c/wire-cable/cable-assemblies/ribbon-cables-idc-cables/?q=idc&connector%20end%20a%20pin%20count=20%20Position~~24%20Position&connector%20end%20b%20pin%20count=20%20Position~~24%20Position&gender=Female%20%2F%20Female&pitch=2.54%20mm&type=IDC%20Header%20Cable~~IDC%20Socket%20Cable&instock=y&rp=wire-cable%2Fcable-assemblies%2Fribbon-cables-idc-cables%7C~Type%7C~Connector%20End%20A%20Pin%20Count%7C~Connector%20End%20B%20Pin%20Count
	>> Cable and header cost/availability is a factor in the design
	Edge connector options if the EDAC one on the board isn't available? https://www.mouser.sg/c/connectors/card-edge-connectors/standard-card-edge-connectors/?board%20thickness=1.57%20mm&mounting%20angle=Straight~~Vertical&number%20of%20positions=24%20Position&pitch=3.96%20mm&instock=y&rp=connectors%2Fcard-edge-connectors%2Fstandard-card-edge-connectors%7C~Mounting%20Angle
	
	These signals (CIA2PortASerialBusVICBank		= $dd00		; 56576) could be used to allow individual EBS/ADDR/DATA/direction (read/write) to be selected
		; Bit 2: RS232 TXD line, output bit.
		; Bit 3: Serial bus ATN OUT; 0 = High; 1 = Low.
		; Bit 4: Serial bus CLOCK OUT; 0 = High; 1 = Low.
		; Bit 5: Serial bus DATA OUT; 0 = High; 1 = Low.
	These 4 bits would give 16 addressable registers in the user port interface
		Or at the very least 4 modes of operation...
	Would need to check read signal operation with the DDR set appropriately. Port pin 8_PC2
	>> Would also need to check the schematic to make sure the "serial bus" isn't connected to the serial port? To avoid hitting the disk drive...
	20 positions:
		Headers: https://www.mouser.sg/c/connectors/headers-wire-housings/?application=Board-to-Cable&contact%20gender=Pin%20%28Male%29&m=Samtec&mounting%20angle=Straight&mounting%20style=Through%20Hole&number%20of%20positions=20%20Position&number%20of%20rows=2%20Row&pitch=2.54%20mm&product=Headers&row%20spacing=2.54%20mm&termination%20style=Solder%20Pin&type=Shrouded&instock=y
		Cables, be careful of reversed and polarity!: https://www.mouser.sg/c/wire-cable/cable-assemblies/ribbon-cables-idc-cables/?q=idc&connector%20end%20a%20pin%20count=20%20Position&connector%20end%20b%20pin%20count=20%20Position&gender=Female%20%2F%20Female&pitch=2.54%20mm&type=IDC%20Header%20Cable~~IDC%20Socket%20Cable&instock=y&rp=wire-cable%2Fcable-assemblies%2Fribbon-cables-idc-cables%7C~Type
	Previous board used: TST-107-01-G-D : https://www.mouser.sg/ProductDetail/Samtec/TST-107-01-G-D?qs=FESYatJ8odJB1y56XqI29Q%3D%3D
	Lots of headers: https://www.mouser.sg/ProductDetail/Samtec/TST-110-01-G-D?qs=rU5fayqh%252BE1iIX99OHEFCg%3D%3D
	Only long 9in cable without reverse!: https://www.mouser.sg/ProductDetail/Samtec/HCSD-10-D-09.00-01-N?qs=Cqqh%252BS766wkrU15Kulb0SQ%3D%3D
		Added cable options to schematic
	Button: https://www.amazon.com/MakerSpot-Momentary-Tactile-Breadboard-Friendly/dp/B06XT3FLVM
		Options: https://www.mouser.sg/ProductDetail/TE-Connectivity-PB/FSM2JRT?qs=g%252BEszo6zu8OVk6hda53nSw%3D%3D
			But .197 hole width
				Can use package TBLOCK-I2
					Pins edited to C-90-40
	> Extra CIA info: https://www.c64-wiki.com/wiki/CIA
	> See updates for Bus24Bit2_Init
		Total signals available: PA2 , SERIALATN , SP1 , SP2 and the strobe _PC for D0..7 write
	> http://www.devili.iki.fi/Computers/Commodore/C64/Programmers_Reference/Chapter_6/page_360.html
	> http://www.devili.iki.fi/Computers/Commodore/C64/Programmers_Reference/Chapter_6/page_362.html
	> Schematics: http://www.zimmers.net/anonftp/pub/cbm/schematics/computers/c64/index.html
	* Does _PC go low when reading the data?
		CIA pinout ( https://www.c64-wiki.com/wiki/CIA#Pinout ) shows: /PC	Port Control - Handshake output, Low pulse after read/write on port B.
		Empirically tested
	* CNT1 CNT2 have pullup resistors and ground filter capacitors and got to pin 40 on the CIAs
		CIA pinout ( https://www.c64-wiki.com/wiki/CIA#Pinout ) shows pin 40 CNT is: CNT	Count - Internal timers can count pulses to this input. Can be used for frequency dependent operations.
	* Some design options... Using the new signals:
		** New 32 bit address space with option to use the old 24 bit board
			Large read/write external memory, with auto increment
			Still pass through _FLAG2 from externals to computers
			Option to let external device control the output to the old 24 bit interface board, to write data to the video hardware
			Use case 1 : Read/write large amounts of memory from the C64 user port, with offset and auto increment for faster screen scrolling or lots of extra graphics or decompression of video/audio data
				Scrolling would be faster because only absolute loads/stores would be needed instead of load/stores with X/Y offsets
				Decompression would be faster as the source data pointer would not need to be updated. However an end data pointer might be needed... Or an end of decompressed data pointer test...
			Use case 2 : External processor calculates 3D data and then allows result memory to be read after it has completed calculation
				A simple latch register, without contention, indicating "job complete" at a certain address range would be suitable
			Use case 3 : External processor calculates and sends large amounts of data direct to the video hardware via the old 24 bit interface
			* SERIALATN = 0 : Keep the old 24 bit board, and have an interface that uses the old 14 pin header. Pass through PA2, D0..7, _PC from computer when active
			* SERIALATN = 1 : New memory interface mode
				PA2 : Low, reset all external address and data bus drivers, start reading 4 bytes for the address and then extra bytes on _PC for address increment
				SP1 = 0 : Read address, address bus drivers active but data bus drivers inactive, allowing read from external memory
				SP1 = 1 : Write address, address bus and data drivers active.
				SP2 = 0 : User port can control the old 24 bit interface, if SERIALATN = 0
				SP2 = 1 : External device controls the old 24 bit interface, regardless of SERIALATN
					New 32 bit write/reads still function as normal
			> Options for suitable SRAM: https://www.mouser.sg/c/semiconductors/memory-ics/sram/?interface%20type=Parallel&organization=1%20k%20x%208%7C~2%20k%20x%208%7C~4%20k%20x%208%7C~8%20k%20x%208%7C~16%20k%20x%208%7C~32%20k%20x%208%7C~128%20k%20x%208%7C~256%20k%20x%208%7C~512%20k%20x%208%7C~1%20M%20x%208%7C~2%20M%20x%208&supply%20voltage%20-%20max=5.25%20V~~5.5%20V&supply%20voltage%20-%20min=4.5%20V~~4.75%20V&instock=y&rp=semiconductors%2Fmemory-ics%2Fsram%7C~Supply%20Voltage%20-%20Max%7C~Supply%20Voltage%20-%20Min&sort=memory%20size%7C1
				> https://www.mouser.sg/ProductDetail/ISSI/IS62C10248AL-55TLI?qs=X3Koi7Dgoq8ZcOQZeNRyCQ%3D%3D
				> https://www.mouser.sg/ProductDetail/Infineon-Technologies/CY62158H-45ZSXI?qs=QmaLbtOb%252B600VoScfZ7T5g%3D%3D
				>> Requested: https://support.labcenter.com/forums/viewtopic.php?f=6&t=8291
			> Options for connectors. While the normal backplane used two 64 pin (2 row x 32) Harting connectors, this is quite wide. So instead consider a 96 pin (3 row x 32) instead:
				Right-angled connectors for board edge: https://www.mouser.sg/c/connectors/backplane-connectors/din-41612-connectors/?m=HARTING&mounting%20angle=Right%20Angle&number%20of%20positions=96%20Position&number%20of%20rows=3%20Row&pitch=2.54%20mm&product=Headers&termination%20style=Solder%20Pin&instock=y
				Straight receptacles for board: https://www.mouser.sg/c/connectors/backplane-connectors/din-41612-connectors/?m=HARTING&mounting%20angle=Straight&number%20of%20positions=96%20Position&number%20of%20rows=3%20Row&product=Receptacles&series=DIN-Signal%20C&termination%20style=Solder%20Pin&instock=y
				Testing parts, these needed adjustment:
				09031966921.step needs package adjustment: 2.3mm 0.5mm 0mm
				09032966825222.step also needs adjustment:
				** The real backplane board also needs model adjustment: 09022646824.step needs: 86.8mm 38.2mm 12.5mm
				Choose the parts with most stock and in gold or copper



* With a read capable user port expansion, it should be possible to expand the simple CPU to be able to perform more complex ALU ops.
	This could enhance 3D calculation.
	Or scrolling...
	
	



			

* APU: To get more instruction options, it would be possible to use the control register to allow extra RAM addressing for the instruction and data RAMs.
	This would allow more data selection options, more registers, and more ALU options.




* The right-angled edge connectors can be moved back away from the board edge to protect their pins



* Done: Extract Audio_Init (Audio.a) from MusicInit $ff
	Code tidy, create defines for the default audio setup





* Kobiconn power jack also very hard to find. Need alternatives, perhaps include both on the layout as options...
	For better power delivery include on back plane and use wider power tracks.
	Some options, but they all use plated slots
		https://www.mouser.sg/c/connectors/power-connectors/dc-power-connectors/?inside%20contact%20diameter=2%20mm&mounting%20angle=Right%20Angle&mounting%20style=Through%20Hole&outside%20contact%20diameter=5.5%20mm&product=Jacks&termination%20style=Solder&instock=y
	Options
	https://www.mouser.sg/ProductDetail/CUI-Devices/PJ-079AH?qs=l7cgNqFNU1iSj66d2zd4mw%3D%3D
	Note 8.2 jack insertion depth might not be long enough...
	Weird extra leg coming out behind... https://www.mouser.sg/datasheet/2/670/pj_081ah-1778736.pdf
	Other options
		https://www.mouser.sg/datasheet/2/670/pj_083ah-1778570.pdf
		https://www.mouser.sg/datasheet/2/670/pj_084ah-1778572.pdf
		https://www.mouser.sg/datasheet/2/670/pj_085ah-1779033.pdf
	SnapEDA footprint options look OK
	Done: Back plane headers moved closer together, plus extra one added with power indicator LED.	
	Done: Consider moving the backplane to a separate file. V9.0
	Done: Consider some large backplane capacitors
		Power supply thoughts around this time: https://youtu.be/1gVx7XcETuM?list=PLDf2uklC__d19aBeKd8OXMdupeDaAiAR4&t=1700
		**Low ESR** Electrolytic Capacitors
		Note options with voltages choose 25V-50V: https://www.mouser.sg/c/passive-components/capacitors/aluminum-electrolytic-capacitors/aluminum-electrolytic-capacitors-radial-leaded/?capacitance=470%20uF&product=Low%20ESR%20Electrolytic%20Capacitors&termination%20style=Radial&instock=y
		>> https://www.mouser.sg/ProductDetail/Panasonic/EEU-FR1E471YB?qs=n1SRcuzDZT1JwIghP%252BP6vA%3D%3D
			EEU-FR1E471YB
		
		




* U83 needs code and supplier info



* Audio hardware testing log
	First power on sounded roughly correct, but there are some differences compared to emulation
	* Stereo separation is not completely separate. Which is actually OK, sounds better. But the root cause needs to be understood why.
		* Perhaps the left/right channel "ground" is not constant depending on the power used by other channels?
	* Looping on one of the channels is perhaps not right?
		* Need a sound tester when MinimalMusicDemoTest is enabled in Demo9
			Pressing fire will mute all channels
			Then joystick left/right/up/down (debounced) will enable one voice only with a sample of the full sample RAM
			Holding down fire will enable looping of half the same RAM length, starting from 25% into the RAM
		>> This shows only voice 3 has an issue with the rate being way too fast, the positions and repeats sound OK
			Suspect V2RATEH from pin 11 on U204, or pin 11 on U170
				Continuity good
		* Suspect output from U170 or accumulator input, perhaps accumulator output
			Will need logic analyser...
			* rate regiser U170 output pins 2 5 6 9 12 15 16 19
			* accumulator U168 , U171-U176 outputs 74283 pins 4 1 13 10
			* accumulator latches U164-U167 74273 pins
		** Assembly error? U182	should be 74157	but looks like a 74LS167?
	* Voice enable and disable in hardware was not correct compared to emulation
		In emulation voiceInternalCounter and voiceInternalChooseLoop were only getting reset when the voicesActiveMask was written with 0
		But in hardware this is happening *all the time*
		>> Adding a common method handleVoiceActiveMaskLatches() and putting this in calculateBalancedSamples() makes emulation sound like hardware
		>> But now the music sounds equally wrong on both
		** Done: The hardware needs to be fixed to align with emulation
			** The below logic changes can be tested by adding handleVoiceActiveMaskLatches() back into calculateBalancedSamples()
				>> Emulation passed! With lots of music tests (--exportmod --playmod tests)
			** Reset voicesActiveMask if **during the write the bit is low**
			** Only load 1 into voicesActiveMask on a positive edge of the bit
				Will need another register latch to be safe :) - Added U53
			** In other words, reset voiceInternalCounter and voiceInternalChooseLoop if **during the write the bit is low**
			** Need logic to only strobe a reset if it is not currently reset... Yay
				a Current mask			b Reset request		x Output
				0						0					1
				0						1					1
				1						0					0
				1						1					1
				== not a or b
			>> Hardware changes passed with Demo1 tune and Demo9 tune problematic loops
			Test with more music data:
				cd /d C:\Work\C64\VideoHardware\tmp
				java.exe -Dmusic.volume=1 -jar ..\..\..\BDD6502\target\BDD6502-1.0.9-SNAPSHOT-jar-with-dependencies.jar --exportmod "C:\Users\Martin Piper\Downloads\blood_money_title.mod" "target/MusicMW2000" 65535 155920
				java.exe -Dmusic.volume=1 -jar ..\..\..\BDD6502\target\BDD6502-1.0.9-SNAPSHOT-jar-with-dependencies.jar --exportmod "C:\Users\Martin Piper\Downloads\turrican.mod" "target/MusicMW2000" 65535 88560
				java.exe -Dmusic.volume=1 -jar ..\..\..\BDD6502\target\BDD6502-1.0.9-SNAPSHOT-jar-with-dependencies.jar --exportmod "C:\Users\Martin Piper\Downloads\shadowofthebeast.mod" "target/MusicMW2000" 1 1
				java.exe -Dmusic.volume=1 -jar ..\..\..\BDD6502\target\BDD6502-1.0.9-SNAPSHOT-jar-with-dependencies.jar --exportmod "C:\Users\Martin Piper\Downloads\Shadow of the Beast (1)\Beast1_2.mod" "target/MusicMW2000" 65535 71268
				java.exe -Dmusic.volume=1 -jar ..\..\..\BDD6502\target\BDD6502-1.0.9-SNAPSHOT-jar-with-dependencies.jar --exportmod "..\assets\SOTB - TITLE.mod" "target/MusicMW2000" 1 1
				java.exe -Dmusic.volume=1 -jar ..\..\..\BDD6502\target\BDD6502-1.0.9-SNAPSHOT-jar-with-dependencies.jar --exportmod "C:\Users\Martin Piper\Downloads\outrun_intro.mod" "target/MusicMW2000" 1 3
				Then run @Demo9
				Comment out all w$ lines in debugData.txt
		* Done: TestAudio1.txt needs updates
			* Also double check with older Audio V9.0 design and new design
			* All channels should match: output\DebugAudioOutput.txt
			* output\DebugAudio.txt can be used to double check that a re-trigger even doesn't happen for that voice even if the active mask is written again
		* TODO: TestAudio1.txt needs a corresponding feature file
			>> Note: Audio V9.2 fixes a bug observed in DebugAudio1.txt at line 2085 where the voice was incorrectly started again
			>> Note: ; Line 8752 ?? Voice 1 not triggering?? ; Fixed by adding an extra d0 before d$802d010f, which indicates it is probably a narrow timing issue. Normally C64 data writes will be much longer than this.




* Regarding audio stereo separation: https://twitter.com/MartinPiper/status/1570011172673556480




* 470uF cap for larger sparse decoupling?
	https://youtu.be/fP7RpCtJz7w?t=2634
	https://www.mouser.sg/c/passive-components/capacitors/?capacitance=470%20uF&voltage%20rating%20dc=25%20VDC~~50%20VDC&rp=passive-components%2Fcapacitors%7C~Voltage%20Rating%20DC




* Audio assembly issue: For U91---Part is 2*7 but board request 2*8
	It's a 7432
	Luckily only one gate used. First layer, for memory control.
	* Should be DIL14CAP20 but it's using a DIL16CAP20. Oops!
	** Use the package tool to update the custom part package
	** TODO: Check all 7432 on all other boards
	>> U91:C -> U71:C : So might be possible to use three flying leads to that spare gate on the build...
		Of course it's on opposite edges, bottom middle and top left. Arghh
	* 7, 8, 9, 10, 14 are the only pins used according to the layout




* Badges : https://twitter.com/RBadgeman/status/1547111545213181952
	https://twitter.com/RBadgeman
	Define kJustForLogo


* SMT options:
	https://macrofab.com/blog/bypass-caps-decouple-your-way-to-cleaner-power/
		"In many cases the datasheet for an IC will give a recommended value for the capacitor. If no value is suggested, 0.1uF (100nF) is widely accepted as a standard go-to value. For most designs, a standard ceramic 0402, 0603, or 0805 package size will typically work well as a bypass cap."
	AgonLight BOM has: https://raw.githubusercontent.com/TheByteAttic/AgonLight/main/Manufacturing/BOM_PCB_AgonLight_R1.0%20MINIMAL.csv
		C11		SAMSUNG,CL05B104KO5NNNC,100nF,C1525	>> Like the current decouple capacitors
		C15		SAMSUNG,CL05A106MQ5NUNC,10µF,C15525 LCSC,C0402
		** Check voltages for the above
		Note multiple decoupling capacitors (and inductor) top left: https://youtu.be/1gVx7XcETuM?t=994
	** Need to check the footprint from data sheets and add suitable options with caps to: SocketsWithCaps.pdsprj
		Check in Proteus packages for SOIC (20) and SO (20) for example
		9.3 mm or 9.3 mm width for example...
		https://www.ti.com/lit/ds/symlink/sn74ls373.pdf?HQS=dis-mous-null-mousermode-dsf-pf-null-wwe&ts=1657457875796&ref_url=https%253A%252F%252Fwww.mouser.sg%252F
		This package has pads that closely match the 0.6 mm x 2 mm pads: SOIC127P1032X265-20
		It has 24x79 thou pads...
		For example, test created: SOIC127P1032X265-20-CAPC1005X55N
			By using the package from CL05B104KO5NNNC
	** Create a new CODESMT entry for each part for the ordering link
	** Check 3 TI parts with their SMT
		Their pads were made slightly wider and longer to match the data sheets
		SMTCODE	SMTPACKAGE	Proteus package	Data sheet
		https://www.mouser.sg/ProductDetail/Texas-Instruments/SN74LS374DBR?qs=SL3LIuy2dWz11ywxrLmk0A%3D%3D	SSOP DB 20	SSOP20TI	https://www.ti.com/lit/ds/symlink/sn74ls374.pdf?HQS=dis-mous-null-mousermode-dsf-pf-null-wwe&ts=1658839044091&ref_url=https%253A%252F%252Fwww.mouser.sg%252F
		https://www.mouser.sg/ProductDetail/Texas-Instruments/SN74LS04DBR?qs=yajEpaT76uTkIEJSyxTAVA%3D%3D	SSOP DB 14	SSOP14TI	https://www.ti.com/lit/ds/symlink/sn74ls04.pdf?HQS=dis-mous-null-mousermode-dsf-pf-null-wwe&ts=1658819899855&ref_url=https%253A%252F%252Fwww.mouser.in%252F
		https://www.mouser.sg/ProductDetail/Texas-Instruments/SN74LS374DBR?qs=SL3LIuy2dWz11ywxrLmk0A%3D%3D	SSOP DB 20	SSOP20TI	https://www.ti.com/lit/ds/symlink/sn74ls374.pdf?HQS=dis-mous-null-mousermode-dsf-pf-null-wwe&ts=1658839044091&ref_url=https%253A%252F%252Fwww.mouser.sg%252F
	* Parts research:
		https://en.wikipedia.org/wiki/7400-series_integrated_circuits
		5V variants:		https://www.mouser.sg/c/semiconductors/logic-ics/latches/?q=373&logic%20family=74ABT~~74ALS%7C~ABT%7C~ALS~~F&number%20of%20circuits=8%20Circuit&number%20of%20output%20lines=8%20Line&polarity=Non-Inverting&supply%20voltage%20-%20max=5.5%20V&supply%20voltage%20-%20min=4.5%20V&instock=y&sort=propagation%20delay%20time&rp=semiconductors%2Flogic-ics%2Flatches%7C~Logic%20Family
		https://www.mouser.sg/c/semiconductors/logic-ics/latches/?q=74ls373&number%20of%20output%20lines=8%20Line
		Very handy logic guide: https://www.ti.com/lit/sg/sdyu001ab/sdyu001ab.pdf
			Page 16 package size chart! https://mastodon.social/@martin_piper/109687968945408871
	



* Original Bomb Jack harness:
	* Original video connector looks like: S6P-SHF-1 2.5mm pitch
	https://www.arcadexpress.com/en/jamma/350-adaptador-jamma-para-juegos-tehkan-world-classics.html
	https://www.arcadexpress.com/en/arcade/30-313-cableado-jamma-de-28pins.html
	https://www.arcadexpress.com/en/arcade/37-11937-conector-para-cable-jamma-de-56-pines.html




		
* Case: https://twitter.com/MartinPiper/status/1522241048059150340
	300mm x 250mm x 180mm (at least)
	11.8in x 9.8in x 7.1in
	https://www.mouser.sg/c/enclosures/enclosures-boxes-cases/?height=7.09%20in~~54.85%20in&length=254%20mm~~54.85%20in&material=Polycarbonate%20%28PC%29&width=300%20mm~~24.8%20in&instock=y&rp=enclosures%2Fenclosures-boxes-cases%7C~Length%7C~Width%7C~Height
	https://www.mouser.sg/ProductDetail/Bud-Industries/DPH-28713?qs=A6eO%252BMLsxmRK3FPlq5Lpxg%3D%3D
	


* Audio: 3.5 mm jack voltage levels, need to be -ve to +ve voltages, not the 0 to +ve voltage as it is currently
	This shows some examples of providing a suitable REFMID voltage: BombJack\TTL to SCART resistor ladder.pdsprj
	For the final resistor 75 ohms looks good, near the volt meters: https://www.mouser.sg/c/passive-components/resistors/film-resistors/metal-film-resistors-through-hole/?m=Vishay&product=Metal%20Film%20Resistors%20Controlled%20Temp%20Coefficient&series=CMF%20Industrial&termination%20style=Axial&tolerance=1%20%25&type=Industrial%20Grade%20Precision%20Metal%20Film%20Resistor&voltage%20rating=250%20V&instock=y
	This REFMId would need similar structure for the Audio schematic
	The 100ohm trimmer resistor is also out of stock, options for replacements: https://www.mouser.sg/c/passive-components/potentiometers-trimmers-rheostats/trimmer-resistors-through-hole/?series=3006&instock=y
		** Pay close attention to pin/package dimensions
		Removed from layout
	https://www.mouser.sg/c/passive-components/potentiometers-trimmers-rheostats/trimmer-resistors-through-hole/?resistance=100%20Ohms&series=3006&instock=y
	Calculate R-2R: http://www.aaabbb.de/JDAC/DAC_R2R_network_calculation_en.php
		R1 = 221
		R2 = 442
		RL = 75		= ~1.25V
		RL = 10000	= ~4.9V
	** Might need filtering caps? Reference original schematic.




* Ceramic capacitors for filters: https://twitter.com/MartinPiper/status/1514627903647993856
	Dedicated opamp for audio instead?
	Also perhaps useful for the video output?

	http://www.learningaboutelectronics.com/Articles/Filter-capacitor.php
	https://learn.sparkfun.com/tutorials/capacitors/application-examples
	https://www.arrow.com/en/research-and-events/articles/using-capacitors-to-filter-electrical-noise
	
		https://www.mouser.sg/c/passive-components/capacitors/ceramic-capacitors/?capacitance=20%20uF~~470%20uF&termination%20style=Axial~~Radial%7C~Through%20Hole&voltage%20rating%20dc=6.3%20VDC~~100%20VDC&instock=y&sort=capacitance%7C1&rp=passive-components%2Fcapacitors%2Fceramic-capacitors%7C~Termination%20Style%7C~Capacitance%7C~Voltage%20Rating%20DC
		
	* However for Road Blasters https://www.arcade-museum.com/manuals-videogames/R/Road%20Blasters%20Schematic%20Package.pdf
		Page 11 shows 470 pf to ground on the RGB (lower right corner)
		

	* Spy Hunter https://www.jammarcade.net/files/Schematics/Arcade/Spy%20Hunter.pdf
		Page 43 bottom right shows 47pf C128 50V AX CER (axial ceramic?) to ground with ferrite beads
			https://www.mouser.sg/c/passive-components/capacitors/ceramic-capacitors/mlccs-multilayer-ceramic-capacitors/multilayer-ceramic-capacitors-mlcc-leaded/?capacitance=47%20pF&termination%20style=Axial&voltage%20rating%20dc=50%20VDC&instock=y
			https://www.mouser.sg/ProductDetail/Hitachi-Metals/FT-3AM-B4ARLY-PF?qs=0lSvoLzn4L9HT5vJRSDFaw%3D%3D
		


* Try recording a high resolution APU bus sample using the DG?



* Now the APU DG timing is fixed, perhaps revisit the _OE logic removal on all other video areas



* APU: Remove instruction RAM _OE logic




* APU: The instruction memory is not limited to 8KB, since it is mapped to $8000
	Using a better select it would be possible to widen the instructions to 64 bits
	This would allow more register selects, ALU operations, status register, indirected selects and branching options
	It would also allow 8 bits to be spent on immediate load values from the instruction



* Sprites2: If I double the RAMs used for storing scaled sprite registers, I can load 2x8 bits in parallel and draw more data.



* Hardware multiply?
	result = 0
	for(b = 0 to 31)
	{
		// Or use bit select, or value shift per iteration...
		if( ((y >> b) & 1) != 0)
		{
			// Use value shift per iteration...
			result = result + (x << b)
		}
	}
* Hardware edge trace?
	https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm#Algorithm_for_integer_arithmetic




* Audio - Check how many ICs/gates need to maintain state for each voice. Compare with remaining ICs/gates used for calculation and interface to the common address bus
	Estimate if there is saving to reduce the rest of the voice calculation to common functionality and state gates with selection logic



* Sprites3
	Choose scale table (allows the root2 or unscaled table to be chosen, useful if the corners of the rotated sprite are not that important) and ignore X/Y boundaries for tiling up to the sprite edge bit flags
	


* Check if constant _OE can be used on all 6116 and 6264 chips instead of toggling them
	Video board shows logic contentions, but data writes seem to still be OK




* Kobiconn plugs are obsolete and need replacing
	https://www.mouser.sg/ProductDetail/Kobiconn/161-0097-E?qs=XvXsANjzvCPrZr5AKzRXng%3D%3D
	removed from V8.0 BOM


* Video: The analogue signals between the resistor ladders and their headers could benefit from being manually placed with wider gaps?
	Also the VGA and 2x4 header output could benefit from being closer to the resistor ladders?



* Audio: Perhaps widen the resistor ladders and separate the analogue output, much like the video board usage of keepout areas



* Plastic (PDIP) 6116 (6116SA20TDB) 2Kx8 SRAM 20ns is going end of life
	EoL notice: https://www.mouser.sg/ProductDetail/IDT/6116SA20TPGI?qs=sGAEpiMZZMt9mBA6nIyysK6VW3GrAnba45Kc6Apw0Go%3D
	https://www.renesas.com/us/en/products/memory-logic/srams/asynchronous-srams
	https://www.renesas.com/us/en/products/memory-logic/srams/asynchronous-srams?field-organization=2K%20x%208&method-field-organization=OR
	The ceramic (CDIP) parts however (search for A20) are still continued
	https://www.renesas.com/us/en/products/memory-logic/srams/asynchronous-srams/5962-89690-50v-2k-x-8-asynchronous-static-ram
	All sizes https://www.mouser.sg/c/semiconductors/memory-ics/sram/?interface%20type=Parallel&mounting%20style=Through%20Hole&organization=1%20k%20x%208%7C~2%20k%20x%208%7C~4%20k%20x%208%7C~8%20k%20x%208%7C~16%20k%20x%208&supply%20voltage%20-%20max=5.5%20V
	** 16k https://www.mouser.sg/c/semiconductors/memory-ics/sram/?interface%20type=Parallel&memory%20size=16%20kbit&mounting%20style=Through%20Hole&organization=1%20k%20x%208%7C~2%20k%20x%208%7C~4%20k%20x%208%7C~8%20k%20x%208%7C~16%20k%20x%208&supply%20voltage%20-%20max=5.5%20V
	** 20ns https://www.mouser.sg/c/semiconductors/memory-ics/sram/?access%20time=20%20ns&interface%20type=Parallel&memory%20size=16%20kbit&mounting%20style=Through%20Hole&organization=1%20k%20x%208%7C~2%20k%20x%208%7C~4%20k%20x%208%7C~8%20k%20x%208%7C~16%20k%20x%208&supply%20voltage%20-%20max=5.5%20V&sort=access%20time
	** 16 kbit and 64 kbit alternatives: https://www.mouser.sg/c/semiconductors/memory-ics/sram/?access%20time=15%20ns~~55%20ns&interface%20type=Parallel&mounting%20style=Through%20Hole&organization=2%20k%20x%208~~8%20k%20x%208&instock=y&rp=semiconductors%2Fmemory-ics%2Fsram%7C~Access%20Time%7C~Organization
	*** At this point it might be better to just use 20ns 64 kbit everywhere?
	>> There is a 15ns 64 kbit narrow (skinny) PDIP-28 option which is cheaper: https://www.mouser.sg/ProductDetail/Alliance-Memory/AS7C164A-15PCN?qs=Y%252BBGkTaltXsac5EeiguTUw%3D%3D
	>>> Perhaps email Renesas Electronics and Alliance Memory to check on how long their options are likely to be around?
		https://twitter.com/MartinPiper/status/1594159150476382211?s=20&t=QVV1iCGXh-cPtiAvdJ43ow
	>> Last APU build from PCBWay used: 6116LA20TPG
		Replace with one of the following:
		https://www.mouser.sg/ProductDetail/Renesas-Electronics/6116SA20TPG?qs=JcGQCygHkIYbYYjhCwPjqQ%3D%3D
		https://www.mouser.sg/ProductDetail/Renesas-Electronics/6116LA20TPGI?qs=GVScuG1d83j4PLGc6sWfNQ%3D%3D
		https://www.mouser.sg/ProductDetail/Renesas-Electronics/6116LA20TPG?qs=SmUuHNCnblrwZH5u1F5zAw%3D%3D




* Sprites : Perhaps with the much faster option 15ns 64 kbit narrow (skinny) PDIP-28 (due to: "(6116SA20TDB) 2Kx8 SRAM 20ns is going end of life")
	* There is maybe an option for over clocking the sprite scanline calculation just like the scaled sprites2 layer does?
	* This would give the option of drawing many more normal sprites



	
* Sprites3
* Scaled sprite rotation, if the EPROM is too slow, then split the pixel output across two clocks?
	There would need to be some latches for the second part of the output path, to ensure that the next sprite being read (during the attribute read) does not affect the final values being written
		Or simpler to pass through the reset logic signal to the last part of the pixel output, which would increase the end period between one sprite and the next sprite reads by one clock as the pixels are flushed...
	2 x 64KB EPROMS, for X and Y rot, the high bit in one of the EPROMS would indicate if the result it out of the sprite bounds or not
	Possible to have different X/Y rotations? Which would generate some skews?
		Doesn't look good...
	https://segaretro.org/Sega_X_Board
		Sprite pixels/texels per frame: 833,333 (at 60 Hz) to 838,408 (at 59.6368 Hz)
		Sprite pixels/texels per scanline: 3180 to 3200 sprite pixels/texels per scanline
		Sprites/textures per scanline: 256
	https://github.com/bji/libmame/blob/master/old/src/mame/video/segaic16.c
	https://github.com/bji/libmame/blob/master/old/src/mame/video/sega16sp.c#L1059
	Perhaps the sprite index high bit could signify sqrt(2) corrected scales to avoid sprite edges
		Meaning select different rotation EPROMs...
		Allowing the full 256 rotations to be used in the lookup
		Plus full 8 bits used for X/Y coords...
		Hmm X and Y would need to be used, or would need multiply lookups for separate X and Y with adds, which doubles IC count...
		Plus X/Y coordinate correction EPROMs based on rotation...





* The single cycle low pulse for "end of hblank" as well as "start of hblank" could be exposed via the backplane




* Sprites2: Try reducing the time needed to read the registers, by not having the memory rest periods before the latches
	Initial test didn't work so well, looks like the calculations and loads went wrong




* Audio: DAC to opamp output: http://users.ece.utexas.edu/~valvano/Volume1/E-Book/C13_DACSound.htm
	Page 6 https://www.nxp.com/docs/en/data-sheet/TDA7050T.pdf
	https://www.electronics-tutorials.ws/combination/r-2r-dac.html



* DAC options?
	TLC5602CDW	Digital to Analog Converters - DAC 8bit 30Msps 1ch 5V
	Also: https://www.mouser.sg/c/semiconductors/data-converter-ics/digital-to-analog-converters-dac/?interface%20type=Parallel&mounting%20style=Through%20Hole&number%20of%20channels=1%20Channel&output%20type=Voltage%20Buffered&resolution=8%20bit&sampling%20rate=30%20MS%2Fs~~-&rp=semiconductors%2Fdata-converter-ics%2Fdigital-to-analog-converters-dac%7C~Sampling%20Rate




* Consider a "hat" board for each voice, using a common bus interfacing with the main logic board
	Each hat would have a signal to select it from the voice schedule




* For the video combination layer, for each pixel input, perhaps add a pixel XOR value that can be used to introduce fast changing palette effects?
	This would be very useful for road layer palette cycling effects: 		http://www.extentofthejam.com/pseudo/#hw
	Or an alternative would be to have the tiles layer have two roads of course. Perhaps a copy of the first road but with different palette for the second.
	https://www.spriters-resource.com/arcade/outrun/




* User port layout : Consider moving the ribbon cable header to the bus edge

* User port: For the Raspberry Pi interface it is useful to have the 5V from the C64 drive the 5V side of the level shifters
	This would need an extra line for the C64 5V and call the net "C645V", be careful not to connect it to the 5V on the externally powered user port interface!
	Adafruit. Sparkfun. TXB0108



* USB logic analyser and data generator: https://www.linkinstruments.com/logana32.html



* Any way to use the connectivity report to assert for fan out limits for LS and HCT part inputs?



* Clock/video lines may need some buffering / extension with 74ls240 or similar for some of the larger boards due to the LS limit of 10 fan-out
	Design Explorer
	Main menu->View->Netlist view
		Then move up/down the netlist entries for each root sheet checking the size
		Sort the netlist table view by "Type" and monitor the number of inputs
	Potential problems:
		6MHz
		_MEWR
		EA*
		ED*




* https://www.mythtv.org/wiki/RGB_Scart
	Generating CSYNC from HSYNC+VSYNC
	https://en.wikipedia.org/wiki/Component_video_sync





* For the mode7 register latches, it might be better to only latch on the HH byte write, but this would use an additional 3*6 latches, which would be too much.
	This would allow updates at any point in the scanline, with the copper. At the moment a write to the l/h/hh registers cannot happen in one pixel clock so the added value will be partially updated and used.



* Idea for new layer, scaled rotated sprites
	Setup sprite data x/y/dx/dxy/dy/dyx like mode7, plus a screen top left x/y plus width/height bounding box to iterate.
	It spits out pixels into the screen buffer and signals when it's done
		* This signal would need the ability to read values over the user port interface
	And could optionally hop into the next item in a link list... and signal the end of the link list
		the mode7 render got me thinking, because the circuitry only really differs in the "fetch a tile index from the screen memory" side of things
		So basically rendering a rotated quad outside the edges test becomes "is the X and Y tile position = 0" instead of "fetch tile index"
		If it's outside the edges then don't plot pixels
	* Could have one pixel push pipeline, that ends up writing to two RAMs, where the address is selected as the screen display (in read mode) or the write address from the calculation (in write mode)
		So 2 input 1 output selectors for the address.




* Need a simple bottom left |_ tile, then position this in the four corners with suitable H/V flips to allow the maximum pixel extent to be validated
	Then validate the border shrinks






* Need DigitalDisplay frame recording and verification of displayed frame with recorded frame.
	Pixel by pixel tests. Can display if the current frame as it is being built up matches the recording, or not.
	Highlight areas that don't match?
	
	

* Need the DigitalData model to also verify a recording against what it currently detects.
	It can also display if what it has received so far matches the recording.



* Need to update ReadMe to reflect new design




	


