* For improved electrical performance
	Menu->Technology->Set Layer Stackup
		Inner 1 + 2 = Plane
		Other copper layers = Signal
		Create appropriate power planes on inner 1 , 2 , 4 using "Create Power Plane"
	Menu->Technology->Design Rule Manager
		Net Classes
			Power : Trace Style : POWER1
				Top/bottom + inner 4 at priority 3
			Signal : Trace Style : DEFAULT
				Top/bottom + inner4 + inner 3 + 4 at priority 1
	However, this does cause complex layers, like Mode7, to not route




* APU try merging the APU with the main schematic to real bus signals?
	The headers and output signals might need some renaming
	Done - APU in schematic and test data needs EBBS changed from 0x04 to 0x02 (since the audio layer already uses 0x04 for sample data)
		Changed in readme already
	Done - Created C64\VideoHardware\asm\main3MultiplexAPU.a which exercises the expected sprite timing behaviour
	TODO - Emulation - For the clock edge related state signals, there needs to be a test for a previous inactive condition to allow for the edge to be activated
		Perhaps a debug warning when the condition is not met
	TODO - Consider another two bytes for the instruction and adding a few extra internal and external address latches, with a demux selector, and increment flags
		This would make sprites effects easier to code by having contiguous blocks of sprite registers in RAM
		However at the moment there is no "load" mechanism for the ADDRB1, it only has reset and increment
			To fully use this, there would need to be some generic read/write temporary registers as well the RAM for loads of the address
		It would also reduce the amount of reloading for the external EBS/EADDR
			kAPU_SelectEBS2EADDR2 - 1 bit for 74157 2 to 1 de-mux selecting the output of EBS/EADDR or another EBS2/EADDR2
			kAPU_Load_EBS2, kAPU_Load_EADDR2Lo, kAPU_Load_EADDR2Hi - 3 bits for load EBS2, EADDR2lo/EADDR2hi
			kAPU_Incr_EADDR2 - 1 bit for increment EADDR2lo/hi
		IDATA could have a 4 to 1 de-mux, giving RAM and 3 output 8 bit latches
			The 2 latches could also be wired for simultaneous 16 bit ADDRB1 lo/hi and perhaps PC load
				PC Load would allow for some kind of comparison and jump instruction
			kAPU_IDataSelectRAM, kAPU_IDataSelectReg0/1/2 - 2 bits for output de-mux select of RAM or DATAREG0/1/2
			kAPU_IDataRegLoad0/1/2 - 3 bits for latch loads of DATAREG0/1/2
		Extra ADDRB1 as ADDRB2
			kAPU_ADDRB2Select - 1 bit for 74157 2 to 1 de-mux selecting the output of ADDRB1 or another ADDRB2
			kAPU_Incr_ADDRB2 - 1 bit for increment ADDRB2
			kAPU_ADDRB1/2Load16 - 2 bits for ADDRB1 or ADDRB2 16 bit load from DATAREG0/1
	* Emulation works, now need to test the new instructions with the APU multiplexor test
		Done
	* Then schematic updates
		32 bit instruction read works, with latch
		Output still validates OK output\DebugAPUOutput.txt
	* Solved - Why am I seeing spurious zero memory writes at the recording digital data?
		d$00010000
		d$00010000
		d$00010000
		* The DigitalData model was interrupting with a spurious write to the last state very often. Oops!


		





* With the video circuitry tweaks, try a higher clock speed, note sprites
	Sprites still get that weird black drop shadow effect to the right hand edge
	Using TestData.txt with "Top left of non-rotated screen, all the same"
	The sprite scan line RAM indicates the calculated output pixels are the same, (f8 ff ... seen) which indicates the problem may be in the read or eventual output of those pixels
	Use: TestData_DebugSprites.txt
	Even the 32x32 sprites show the drop shadow effect, so the problem exists for all sprites regardless of their size
	It's not really a "drop shadow" it is actually the last trailing output pixel, when viewed from left to right in the scan line, that is black (or the wrong colour)
		The pixels are not displaced, or shifted
	At 12.096MHz execution: Breakpoint at RV=0x18 and then timed breakpoint execution for 21.5u
	Single Step Time was: 50n
		Now: 25n
	At faster MHz, use 14u timed breakpoint
	1V*. is low when RH=0x0008 and RV=0x18
	Tried a shorter scan line write pulse and longer read pulse, but this did not fix the issue The output pixel latch from the scan line RAM is still reading garbage.
	
	
	




* For board EA/EBS/EXTSEL config - Need to use jumpers (in the schematic it is closed to use the defaults) to connect the external bus to the internally used signals
	The routing will then not automatically connect the gap
	Jumpers should be placed on the edge of the board away from the interconnects



* TestSpriteTimings.txt
	Some sprite register timing tests, to help check multiplexor ideas with respect to writing certain registers outside of their update slots in the raster line
	
	
	
* Pixel header connectivity
	PCB female header to male right angled: https://www.mouser.sg/ProductDetail/Molex/90122-0764/?qs=kEwmkoUtv7R5aSrMIeNWYw%3D%3D
	Then to socket: https://www.mouser.sg/ProductDetail/3M-Electronic-Solutions-Division/3868-6600/?qs=8XPjJVwSY9BFfS5andYLaA%3D%3D
		Or: https://www.mouser.sg/ProductDetail/Wurth-Elektronik/61200823021/?qs=PhR8RmCirEZvQm5v3EiYrA%3D%3D
	Cable: https://www.mouser.sg/Wire-Cable/Flat-Cables/_/N-5ggmZ1yzvvqx?P=1ytitytZ1z0vl9dZ1yzu8m9
	
	Perhaps these 10 way: https://www.mouser.sg/Connectors/Headers-Wire-Housings/TST-Series/_/N-ay0loZ1yzvvqx?P=1y6pcziZ1yvgchwZ1ytkn06Z1z0spqhZ1z0z63vZ1yzobh4Z1z0z63xZ1z0wxp6Z1yzv8u1Z1yzv7x2Z1yzs9vm&Ns=Number+of+Positions%7c0&FS=True
	Perhaps these 10 way: https://www.mouser.sg/Connectors/Headers-Wire-Housings/TST-Series/_/N-ay0loZ1yzvvqx?P=1y6pcziZ1yvgchwZ1ytkn06Z1z0spqhZ1z0z63vZ1yzobh4Z1z0z63xZ1z0wxp6Z1yzv8u1Z1yzv7x2Z1yzs9vm&Ns=Number+of+Positions%7c0&FS=True
	Right angled: https://www.mouser.sg/Connectors/Headers-Wire-Housings/TST-Series/_/N-ay0loZ1yzvvqx?P=1y6pcziZ1yvgchwZ1ytkn06Z1z0spqhZ1yzs9vmZ1z0z63vZ1yzobh4Z1z0z63xZ1z0wxp6Z1yzv8u1Z1yzv7x2Z1z0xbud&Ns=Number+of+Positions%7c0&FS=True
	10 way cables: https://www.mouser.sg/Wire-Cable/Cable-Assemblies/Ribbon-Cables-IDC-Cables/_/N-bkreeZ1yzvvqx?P=1yyu1hyZ1z0wxp6Z1yny8waZ1yny8w9&Keyword=idc&FS=True
	
	



* Consider reinstating 4E/4F?


* User port layout : Consider moving the ribbon cable header to the bus edge








* PCB connectivity options:
	DIN 41612:
	https://en.wikipedia.org/wiki/DIN_41612
	https://www.hirose.com/en/product/series/PCN13#
	Backplane straight receptacles 50 way 2 rows:
		https://www.mouser.sg/Hirose-Electric/Connectors/Backplane-Connectors/DIN-41612-Connectors/PCN10-Series/_/N-axj5jZ1yzvvqx?P=1ytkn9pZ1yzve1gZ1z0z5h6Z1z0jmg3Z1z0j1prZ1z0xbxo
	Right angled board edge connector 50 way 2 rows:
		https://www.mouser.sg/Hirose-Electric/Connectors/Backplane-Connectors/DIN-41612-Connectors/PCN10-Series/_/N-axj5jZ1yzvvqx?P=1ytkn9pZ1z0spqhZ1yzve1gZ1z0z5h6Z1z0jmg3Z1z0xbyw

	Or perhaps Harting connectors. But these a press-in, which look more complicated to solder:
		https://www.mouser.sg/HARTING/Connectors/Backplane-Connectors/DIN-41612-Connectors/_/N-axj5jZ1yzvvqx?P=1z0z5h6Z1z0wxp6Z1z0zl89&Keyword=41612&FS=True
		https://www.mouser.sg/ProductDetail/HARTING/09282486804791?qs=%2Fha2pyFadujf%2FON5mzZXH%252BmRzB7nM%2FaLl9OChyBxONU%3D
		
	>>**<< These are 64 way and have solder pins plus Proteus parts:
		https://www.mouser.sg/ProductDetail/HARTING/09021646921?qs=gIpPgrDBK%2FiWr6s0yE4P1A%3D%3D
		https://www.mouser.sg/ProductDetail/?qs=gIpPgrDBK%2Fj7cjNJs9Ij%252BQ%3D%3D
	These are >=48 way, suitable for the video connectors:
		Receptacles: https://www.mouser.sg/TE-Connectivity/Connectors/Backplane-Connectors/DIN-41612-Connectors/_/N-axj5jZ1yzvvqx?P=1z0xby7Z1ytf3jyZ1ytkn9pZ1ysmvawZ1z0z63vZ1z0z5h6Z1yzvwjmZ1z0wxp6Z1yzs6iiZ1z0j1pr
		>> https://www.mouser.sg/ProductDetail/TE-Connectivity/5535091-5?qs=U4pz39agNJApG5vcI2Ocug%3D%3D
		Connectors right:
		https://www.mouser.sg/TE-Connectivity/Connectors/Backplane-Connectors/DIN-41612-Connectors/_/N-axj5jZ1yzvvqx?P=1ytf3jyZ1ytkn9pZ1ysmvawZ1z0z63vZ1z0z5h6Z1yzvwjmZ1z0wxp6Z1yzs6iiZ1z0vlpq
		>> https://www.mouser.sg/ProductDetail/TE-Connectivity/5650478-5?qs=xrnNvQC1SKQL0IHY3tGLpg%3D%3D
		
		
		
		
		
	
	


	Backplane:
		https://www.ti.com/lit/an/szza016b/szza016b.pdf
		https://resources.altium.com/p/signal-integrity-simulations-backplane-bus-connectors
	Ribbon cable + IDC:
		https://electronics.stackexchange.com/questions/206133/ribbon-cable-noise-susceptibility
		https://www.machinedesign.com/archive/article/21818753/tricks-of-the-trade-for-lownoise-design
		https://forum.allaboutcircuits.com/threads/ribbon-problems-there-has-to-be-a-better-way.17214/
		https://www.avrfreaks.net/forum/shielding-ribbon-cable
	* Perhaps a terminating header row, with a parallel row of headers at ground/power, allowing an easy bridge by any resistor/capacitor as needed

	


* 5 RCA male to VGA Male is uncommon:
	https://www.cs1.net/products/canare/V5-1p5C_RGBHV_VGA_breakout.htm
	https://www.elecbee.com/en/d-sub-cable-assemblies/3035-vga-to-rgbhv-rca-connector-cable-hd15-male-to-5-rca-male-connectors-12-feet-long.html
	5 BNC male to male VGA is a lot more common:
		https://www.amazon.com/C2G-02572-Premium-Rgbhv-Meters/dp/B0073DP4BC
		https://search.c2g.com/uk?category=1%7CVGA&it=item&keyword=rgbhv
	So consider BNC female for the next generation board
		https://www.mouser.sg/ProductDetail/TE-Connectivity/5227677-1?qs=GSeC4G%252BEqEX0oAnTcsRqKg%3D%3D
			The 3D model orientation is wrong for this part, when it gets imported from the extended search
		** Remember some spacing between connectors is good




* Need ADDRB1 lo/hi logic read, at the moment it's just reset
	Internal RAM read address




* APU needs VIDCLK counter/divider with jumper output select, first choice being raw VIDCLK, going to U35:D




* USB logic analyser and data generator: https://www.linkinstruments.com/logana32.html




* The "Sprite scan RAM logic" reads scan RAM, tests for transparency, writes sprite pixels in transparent or writes back existing value
	Perhaps change the logic so that the input sprite pixel is tested for transparency and only written if opaque?
		This would reduce the constant read, test, write back cycle to only test and optional write
		* This would mean the last sprite has priority instead of the first sprite however, i.e. the priority of sprites is reversed




* Consider higher current output than a normal 7805 regulator.
	https://www.mouser.sg/Semiconductors/Power-Management-ICs/Voltage-Regulators-Voltage-Controllers/Linear-Voltage-Regulators/_/N-5cg9g?P=1z0z63xZ1z0wadv&Keyword=7805&FS=True
	https://www.mouser.sg/ProductDetail/Texas-Instruments/UA7805CKCS?qs=IEl3ej0IqwDTl9fhEpiFdQ%3D%3D
	https://www.mouser.sg/ProductDetail/STMicroelectronics/LD1085V50?qs=%2Fha2pyFadugp3TsIEWjKyT083J8Jn3o2iWNBXzYOghY%3D
	Or buck regulator?
		https://fr.aliexpress.com/item/32726124435.html?ws_ab_test=searchweb0_0,searchweb201602_4_10065_10068_433_10000509_10000656_10136_10060_10062_10056_10055_10054_302_10059_10000636_10099_10103_10102_10096_10052_10053_10107_10050_10106_10051_10000090_10000729_10084_10083_10080_10082_10081_10110_10000375_10111_10112_10000377_10113_10114_10000349_10078_10079_10073_10000519_10070_10122_10123_10126_10000511_10124_10000514,searchweb201603_2,afswitch_1,ppcSwitch_5,single_sort_0_default&btsid=ba1207db-29e6-4f78-a993-ea479fd99bc0&algo_expid=179a1c71-1922-45a6-97fc-93dabe2447d3-0&algo_pvid=179a1c71-1922-45a6-97fc-93dabe2447d3
		https://fr.aliexpress.com/item/32689938167.html?ws_ab_test=searchweb0_0,searchweb201602_4_10065_10068_433_10000509_10000656_10136_10060_10062_10056_10055_10054_302_10059_10000636_10099_10103_10102_10096_10052_10053_10107_10050_10106_10051_10000090_10000729_10084_10083_10080_10082_10081_10110_10000375_10111_10112_10000377_10113_10114_10000349_10078_10079_10073_10000519_10070_10122_10123_10126_10000511_10124_10000514-10050,searchweb201603_2,afswitch_1,ppcSwitch_5,single_sort_0_default&btsid=466a6ab4-ecc2-442d-8954-e0821251912f&algo_expid=aa25a339-5e7a-4652-bdd2-e70b3f6ef4f2-2&algo_pvid=aa25a339-5e7a-4652-bdd2-e70b3f6ef4f2
		
	* It would help to estimate the total current used by by each board
		
		



* IC Sockets should ideally have flat pin spring connections, not round sockets.



* Any way to use the connectivity report to assert for fan out limits for LS and HCT part inputs?



* Order replacements:
	74HC138
	https://www.mouser.sg/ProductDetail/Texas-Instruments/SN74LS138NE4?qs=SL3LIuy2dWx0lDDFWb%252BGZQ%3D%3D

	CONN-DIL34
	https://www.mouser.sg/ProductDetail/3M-Electronic-Solutions-Division/929852-01-17-RA?qs=VCIs6OJqWMkB6xFyOZZSxA%3D%3D
		
	CONN-DIL20
	https://www.mouser.sg/ProductDetail/3M-Electronic-Solutions-Division/929975-01-10-RK?qs=4V84emjyG36NmJ6%252BaqUY8g%3D%3D
	
	CONN-SIL2
	https://www.mouser.sg/ProductDetail/3M-Electronic-Solutions-Division/929850-01-02-RA?qs=s3by4FhMkp0TJ2ZYzpYr%252Bg%3D%3D
	
	CONN-SIL8
	https://www.mouser.sg/ProductDetail/3M-Electronic-Solutions-Division/929974-01-08-RK?qs=neFkstNq%252B6G7LvVslYqF6A%3D%3D
	
	Long tail (wire wrap) SIL and a DIL
	https://www.mouser.sg/ProductDetail/437-8018700353001101
	https://www.mouser.sg/ProductDetail/437-8018700553001101
	https://www.mouser.sg/ProductDetail/437-8018700853001101
	https://www.mouser.sg/ProductDetail/437-8018701053001101
	https://www.mouser.sg/ProductDetail/437-8038301653001101
	
	DIL decoupling
	DIL08 no cap
	https://www.mouser.sg/ProductDetail/Mill-Max/110-93-308-41-001000?qs=WZeyYeqMOWe5ncqYpB7m3g%3D%3D
	DIL14
	https://www.mouser.sg/ProductDetail/Mill-Max/110-93-314-41-801000?qs=%2Fha2pyFaduiAoJI%252BFT3Un6AU4u1EPWQWyNo%252BHzE50tJ%252B9XjMyXXSECwGDt8yOlKj
	DIL16
	https://www.mouser.sg/ProductDetail/Mill-Max/110-13-316-41-801000?qs=WZeyYeqMOWd122xzWNZKKg%3D%3D
	DIL18
	https://www.mouser.sg/ProductDetail/Mill-Max/110-13-318-41-801000?qs=WZeyYeqMOWcusVdSCp10bQ%3D%3D
	DIL20
	https://www.mouser.sg/ProductDetail/Mill-Max/110-43-320-41-801000?qs=RC2ne4458IKe5rHuueYA%2FA%3D%3D
	DIL24
	Need narrow and wide (7.62 mm and 15.24 mm)
	Narrow: https://www.mouser.sg/ProductDetail/Mill-Max/110-93-324-41-801000?qs=2mZjssE3HVXiFvwLlnaxRQ%3D%3D
	Wide: https://www.mouser.sg/ProductDetail/Mill-Max/110-13-624-41-801000/?qs=WZeyYeqMOWcY1RNZipzOSA%3D%3D
	DIL28 No cap
	https://www.mouser.sg/ProductDetail/Mill-Max/110-43-328-41-001000?qs=IGgAdOvCTsQUPmob89wrvw%3D%3D
	DIL28
	https://www.mouser.sg/ProductDetail/Mill-Max/110-93-628-41-801000?qs=%2Fha2pyFaduh%2F2llJlOg9PDhABSeSvrmpwTTGEnsRDIDydS5MKhEOSHtrFYy51Bes
	https://www.mouser.sg/ProductDetail/Mill-Max/110-13-628-41-801000?qs=%2Fha2pyFaduj2Vn9jTBaNkbbuPoiuMRTWeD8fU3A14YCfUCD0%252BtDLsfAVe9w3OSTn
	
	* Wide 6116 SRAM https://www.mouser.sg/ProductDetail/Renesas-IDT/6116SA150DB?qs=GVScuG1d83icae5fIq%252BJNg%3D%3D
		Also wide https://www.mouser.sg/ProductDetail/972-6116LA45DB
		The wide variants seem to have stock issues, so perhaps better to stick with the narrow variants

	* Can oscillators for user port interface, various speeds. Note the "tristate" ones where pin 1 is EOH "enable on high", it can float:
		https://www.mouser.sg/Passive-Components/Frequency-Control-Timing-Devices/Oscillators/Standard-Clock-Oscillators/_/N-7jdvaZ1yzvvqx?P=1z0yz4qZ1z0wu68Z1yzv18zZ1y95k8nZ1yzmm18Z1yzmm16Z1z0wnuiZ1z0wo7vZ1z0wnt1Z1z0woad&FS=True
		
		
	

** V3.0 needs to be regenerated
	Connectivity check passes
	These ICs were auto-placed, then horizontally and vertically gaps were added and added to the board. This promoted better auto-placement for other ICs and helped auto-routing.
		U136
		U71
		U207
		U215
		U229
		U224
	Added feature request: https://support.labcenter.com/forums/viewtopic.php?f=10&t=7821
	Note: Auto-route seems much easier when one board/group is auto-placed and routed instead of placing all the boards, then routing separately.
		Why? could be that when auto-placing all boards the layout is not as optimal.
			Comparing the force vectors between the "all board" and "single board" place shows major differences.
				Some components are pointing off board, when they should all be self contained to the group. This affects the placement.
	Note: Each board needs to be saved individually, with the other boards removed. Then place ICs by group: In PCB, components mode, use the drop-down filter, right click first component in list -> menu, "Place Group By Room"
		Then route each separate board



* Clock/video lines may need some buffering / extension with 74ls240 or similar for some of the larger boards due to the LS limit of 10 fan-out
	Design Explorer
	Main menu->View->Netlist view
		Then move up/down the netlist entries for each root sheet checking the size
		Sort the netlist table view by "Type" and monitor the number of inputs
	Potential problems:
		6MHz
		_MEWR
		EA*
		ED*




* https://www.mythtv.org/wiki/RGB_Scart
	Generating CSYNC from HSYNC+VSYNC
	https://en.wikipedia.org/wiki/Component_video_sync




* Video - Changing from 12.096MHz to 15MHz to enable a 320 pixel (480 scan) wide display
	output\12.096M compared to output\15M shows sprite colour issues with 15M.
		Similar was seen when attempting hires mode Done.txt: "There is a strange sprite colour corruption when running at VIDCLK = 24 MHz"
	* Perhaps this is due to ripple from the pixel counters?
		* Try adding a latch for the counter outputs
			No improvement
	* Perhaps it's the whole long pathway from U79?
		Note: Even at 15Mhz the data generator needs to use the next slower clock pulse, which kills the picture comparison test
		The sprites don't start drawing until 8 pixels delay from the first register read...
		So... Try latching the outputs from the RAMs to the internal values only when 8H is low
		However frame 1 is showing no change, since it is full frame without raster effects
			115         00000000
			0 	        00000001	<<<<<<****!!
			127         00000002
		* Fix at 15MHz! : For 7R which outputs _MDL _CDL _ VPL which latches the results of the frame, colour, vertical position
			The enable input uses 8H OR (Q output of 4S:B below)
			Visual verification of the sprites and other layers looks OK
			* Now to decide if I want the horizontal resolution to be increased...
		* A big change would be: Try adding 3 extra RAMs that consistently read the values and latch them with more time than trying to select all the values from the same RAM
		



	

* For the mode7 register latches, it might be better to only latch on the HH byte write, but this would use an additional 3*6 latches, which would be too much.
	This would allow updates at any point in the scanline, with the copper. At the moment a write to the l/h/hh registers cannot happen in one pixel clock so the added value will be partially updated and used.



* Perhaps a layer combination board, which does the zero 3-bit or 8 bit pixel test and allows multiple expansion planes to be used?



* Idea for new layer, scaled rotated sprites
	Setup sprite data x/y/dx/dxy/dy/dyx like mode7, plus a screen top left x/y plus width/height bounding box to iterate.
	It spits out pixels into the screen buffer and signals when it's done
		* This signal would need the ability to read values over the user port interface
	And could optionally hop into the next item in a link list... and signal the end of the link list
		the mode7 render got me thinking, because the circuitry only really differs in the "fetch a tile index from the screen memory" side of things
		So basically rendering a rotated quad outside the edges test becomes "is the X and Y tile position = 0" instead of "fetch tile index"
		If it's outside the edges then don't plot pixels
	* Could have one pixel push pipeline, that ends up writing to two RAMs, where the address is selected as the screen display (in read mode) or the write address from the calculation (in write mode)
		So 2 input 1 output selectors for the address.




* Need a simple bottom left |_ tile, then position this in the four corners with suitable H/V flips to allow the maximum pixel extent to be validated
	Then validate the border shrinks




* Investigate the "display enable" being used to still output video timings, just disable the pixel output
	This would allow memory updates to be enabled, without seeing bad video output and while maintaining video sync




* Auto-routing tests
	With default options, it takes ~15 minutes: https://support.labcenter.com/forums/viewtopic.php?f=5&t=7693
	Are there quicker options?
		Yes, changing the grid does help but sometimes the boards are not populated fully as they run out of space.



* VSMDD2 why is "w$ff01ff00,$3f018000" triggering near raster 2f?
	* The copper (VSMDD2) RV[0..7] input needed an extra latching 74273 (U84 excluded from PCB) to smooth the signal from the counters
		This kind of buffering logic is going to be needed on the real hardware, and might need to be added to the VSMDD2 inputs from the CLK
* Below might be related...
* Colour bars: With the sin/cos wave pattern, it seems to clamp to a bad value? Investigate the data driving this pattern...
	The horizontal and vertical pixel counters might need to be latched



* GenerateData2
	* Is the slight pixel ripple effect observed when moving right (output\debug2.gif) is the hardware or the virtual display adaptor...
	* Much higher X resolutions (like 1024 pixels) on the virtual display need to be tested...
		* Higher resolutions do show the grass an other tiles with some very thin vertical colour edge bleeding on perhaps the tile boundary
			This might be due to the colour RAM fetch not being completely synced with the tile pixel shifting and output mix?
			Or this might be caused by the horizontal and vertical pixel clocks not being latched from the counters, so the counter ripple is not quite exactly settling all at the same time?





* Copper plans
	If the hires xpos is used, then consider starting a _MEWR pulse at that point in time and any further writes would be based on that time too.
	This would allow hires writes to the background colour for example.
	Any subsequent writes could then be lower resolution to fit with RAM timing constraints.
	Could the copper board be built in-between the 24 bit parallel board and the main display board?
		Input = EBS + EAB + EDB + ROWCOL, output = EBS + EAB + EDB
			Internally EBS = 2 is used to trigger the copper and ROWCOL checks
			It could use VIDCLK and 6MHz lines from ROWCOL
	Note: The selector and RAM are used to show working memory writes in the main display board
	* It would be possible to store a 16 bit addition value, to facilitate storage of screen data that is stored in values +16 bytes at a time



* Overscan, disable all pixel blanking from HBL?




* Need DigitalDisplay frame recording and verification of displayed frame with recorded frame.
	Pixel by pixel tests. Can display if the current frame as it is being built up matches the recording, or not.
	Highlight areas that don't match?
	
	

* Need the DigitalData model to also verify a recording against what it currently detects.
	It can also display if what it has received so far matches the recording.



* Need to update ReadMe to reflect new design



* Split design into layers, use common bus for internal communications
	* Renumber component refs depending on their layer, 1xx main, 2xx screen... etc.
	* Main: Clocking, video timing, pixel combination and palette lookups
	* Screen + colour RAM
	* Sprites
	* Background picture



* Note C5 200P capacitor, check it is a ceramic disc on the board



* Parts list, Book of Materials, stock code links to ordering websites needed
	Adding links to the "stock code"
	Breadboard
	https://www.mouser.sg/ProductDetail/Twin-Industries/TW-E41-1060?qs=sGAEpiMZZMvxYGX2LOb%252BCkpSd%2FF6Zib6rdOv%2FJq26CY%3D
	Resistors
	https://www.mouser.sg/Passive-Components/Resistors/Through-Hole-Resistors/_/N-7h7z5
	https://www.mouser.sg/Passive-Components/Resistors/Through-Hole-Resistors/_/N-7h7z5?P=1z0z819Z1yzbpodZ1yyxf87
	VGA
	https://www.mouser.sg/ProductDetail/Gravitech/DB15F-VGA-TERM?qs=%2Fha2pyFadujCKQleo0iutDpWDaGRRxjTkj9IAyF0Np7%252BUoWsr1SFIUxZNLIelf9qWe7mZLtJ2l3bbZy4VSVLAA%3D%3D
	SIL/DIL connectors
	https://www.mouser.sg/3M/Connectors/Headers-Wire-Housings/_/N-ay0lo?P=1z0xbxoZ1yvsm2aZ1yvgcdjZ1ytkn39Z1yq9ciwZ1ytkls2Z1ytkn06Z1z0z5h6Z1yzxj1jZ1z0z63xZ1z0wxp6Z1yzv7x1Z1z0zp4d
	With long pins, wire wrap termination style: https://www.mouser.sg/Connectors/Headers-Wire-Housings/_/N-ay0lo?P=1z0z24iZ1z0z63xZ1z0wxp6Z1yzxj1j
	Sockets decoupling
	https://www.digikey.sg/products/en/connectors-interconnects/sockets-for-ics-transistors/409?k=&pkeyword=dip+decoupling&sv=0&pv5=382168&sf=1&FV=589%7C405002%2C-8%7C409&quantity=&ColumnSort=0&page=1&pageSize=25
	Same decoupling socket, found using manufacturer part number
		https://www.digikey.com/product-detail/en/mill-max-manufacturing-corp/110-93-314-41-801000/ED2101-ND/33731
		https://www.mouser.sg/ProductDetail/Mill-Max/110-93-314-41-801000?qs=%2Fha2pyFaduiAoJI%252BFT3Un6AU4u1EPWQWyNo%252BHzE50tJ%252B9XjMyXXSECwGDt8yOlKj
	This shows decoupling sockets by size
		https://www.digikey.com/en/products/filter/sockets-for-ics-transistors/409?s=N4IgjCBcoKxaBjKAzAhgGwM4FMA0IB7KAbRAGYAOAJjADYKQBdfABwBcoQBlNgJwEsAdgHMQAX3y0AnPBBJIaLHkIkQAFjBgKUgOxNWHSNz5DRYiSFqz%2BAE04wdEA5x4CRIfGwCeLbJxuYSOZAA
	Digikey might be a better source?
		https://www.digikey.sg/products/en/integrated-circuits-ics/logic-gates-and-inverters/705?k=74ls27&k=&pkeyword=74ls27&sv=0&pv69=411897&sf=0&FV=-8%7C705&quantity=&ColumnSort=0&page=1&pageSize=25
		https://www.mouser.sg/ProductDetail/Texas-Instruments/SN74LS27N?qs=sGAEpiMZZMutXGli8Ay4kP28D9wZ8SQIwsPDjIqEADE%3D
	Digikey has memory
		https://www.digikey.sg/products/en/integrated-circuits-ics/memory/774?k=&pkeyword=&sv=0&pv69=411897&sf=1&FV=-8%7C774&quantity=&ColumnSort=0&page=1&pageSize=25
		But no price: https://www.digikey.sg/products/en/integrated-circuits-ics/memory/774?k=&pkeyword=&sv=0&pv142=227740&sf=1&FV=-8%7C774%2C69%7C411897&quantity=&ColumnSort=0&page=1&pageSize=25
		Jameco has: https://www.jameco.com/shop/ProductDisplay?catalogId=10001&langId=-1&storeId=10001&productId=38957
			Faster: https://www.jameco.com/z/2114N-2-Major-Brands-IC-2114N-2-SRAM-1Kx4-DIP-18-pin-200ns_38973.html?CID=MERCH


* Reorganise the memory map detection logic, remove 3M:A for ROMs, 3M:B 4M 5M 2S:B 1C:A
	Add new memory block detection for _9800CS, _9A00CS, _9C00CS, _9E00CS
	Use a memory block that is not used by the expansion RAM, perhaps the BASIC ROM area
	Check the CPU memory expansion, BUSDDR or CPUHASBUS can also be used to improve the memory block chip detection
	


* For integration with the TTL 8 bit CPU the VSYNC signal could be exposed to EXPANSIONBUS:EXTWANTIRQ
	Remove extra unused logic E7P:A E7P:B E6P:C 5P:A
	This will need a latch arrangement similar to the CPU latch, no use holding EXTWANTIRQ low for so long without being acked
	CPU->Root sheet 8->U250:A
		CIA1 read ACK U201:A



* Allow the _HSYNC and _VSYNC to be read via the external header, as memory mapped IO. Probably reuse the number of sprite register see _9A00CS
	This would need _MERD to be added to the external header. Also the BUSDDR would need to be used to enable the correct tri-state output
* Allow RH AND RV to be accessed via memory mapped IO
	
	
	



* The expansion bus and the memory write signals will need to be translated to the internal memory write signals




	
* 4C/4D when run at 6MHz will generate "sub optimal write pulses" errors with default values. Running at 1MHz fixes these issues.
	* The output pixel data seems to be better when the timing is reduced.
	* Investigate the output for read/write timings of these memory ICs for 6MHz operation.

	
	

* How many layers? Six?
	https://www.allpcb.com/6_layer_pcb.html
		Created template: All PCB Six Layer 1.58532mm.LTF
	http://referencedesigner.com/books/si/6-layer-stackup-ch6.php
	
	
* Singapore PCB fabrication:
	https://www.wizlogix.com/
	http://www.evonix.com.sg/PCBFabrication.php
	http://www.kentronicsengineering.com/
	



* All the very similar block, for the new RAMs and also the pixel shift outputs, could use a sub-circuit now
	Since they are RAM addressed and the ROM with its associated data file in the schematic is not important
	If the RAM/ROM names are still important, then have them outside of the sub-circuit



* Split this layout so that different output planes can be added or removed via internal headers, daisy-chained probably.
	The final combination logic can then take the output pixels and combine the final result via the pallet lookups
