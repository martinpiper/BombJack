; Blank (address b$0000)
d0

; Background image enable and index
; x	Display enable (DB5)
; With DBGWRITE ~= 10k then b$12 is needed first, to disable the display and avoid the data writes appearing in the display
; Then at the end use b$32 to enable the display after all the memory is populated
; With DBGWRITE >= 200K then the RAM writes (to the original RAM/registers) all complete before the VBLANK has finished
; Using DBGWRITE = 1M safely writes all data very quickly, with a debug delayed _MEWR pulse from U1 U2 and U3:A
; x	enable (DB4)
;  y	index (DB0-3)
; Write data from into RAM mapped at $9e00 with EBS $01
d$9e000112

; Setup the BG tiles X/Y fine scroll positions to be X=7 and Y=7, or X=f and Y=f
d$9e010177
d$9e0101ff
; No scroll position
d$9e010100

; Tile X/Y position offset
d$9e020100

; Clear background palette choice
d$9e030100

; Address auto-increment using data bits 16-31
+16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,+

; Write background data from 02_p04t.bin into RAM mapped at $2000 with EBS $80
; Standard resolution test uses the tile hardware scroll registers at $9e02 to shift the screen around
s$20008000
<0,1,2,3,4,5,6,7,<02_p04t.bin

; For the higher resolution test, this copies the relevant data into the new positions
;s$28008000
;<0,1,2,3,4,5,6,7,@$400,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$410,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$420,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$430,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$440,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$450,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$460,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$470,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$480,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$490,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4a0,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4b0,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4c0,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4d0,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4e0,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4f0,>$20,<02_p04t.bin
;s$2a008000
;<0,1,2,3,4,5,6,7,@$500,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$510,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$520,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$530,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$540,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$550,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$560,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$570,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$580,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$590,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5a0,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5b0,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5c0,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5d0,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5e0,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5f0,>$20,<02_p04t.bin

; For the higher resolution test, this copies the relevant data into the new positions
; Shifted left, next bank
;s$2c008000
;<0,1,2,3,4,5,6,7,@$401,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$411,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$421,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$431,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$441,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$451,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$461,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$471,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$481,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$491,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4a1,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4b1,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4c1,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4d1,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4e1,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4f1,>$20,<02_p04t.bin
;s$2e008000
;<0,1,2,3,4,5,6,7,@$501,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$511,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$521,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$531,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$541,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$551,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$561,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$571,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$581,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$591,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5a1,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5b1,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5c1,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5d1,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5e1,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5f1,>$20,<02_p04t.bin

; Shifted left next bank
;s$30008000
;<0,1,2,3,4,5,6,7,@$402,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$412,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$422,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$432,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$442,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$452,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$462,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$472,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$482,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$492,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4a2,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4b2,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4c2,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4d2,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4e2,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$4f2,>$20,<02_p04t.bin
;s$32008000
;<0,1,2,3,4,5,6,7,@$502,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$512,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$522,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$532,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$542,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$552,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$562,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$572,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$582,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$592,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5a2,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5b2,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5c2,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5d2,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5e2,>$20,<02_p04t.bin
;<0,1,2,3,4,5,6,7,@$5f2,>$20,<02_p04t.bin

; This fills the remaining 4K of RAM
;<0,1,2,3,4,5,6,7,<02_p04t.bin

; Debug colour data for the sphinx that includes colour variation and also tile flips
;s$25008000
;b$00,b$01,b$02,b$03,b$04,b$05,b$06,b$07,b$08,b$09,b$0a,b$0b,b$0c,b$0d,b$0e,b$0f
;b$01,b$02,b$03,b$04,b$05,b$06,b$07,b$08,b$09,b$0a,b$0b,b$0c,b$0d,b$0e,b$0f,b$00
;b$02,b$03,b$04,b$05,b$06,b$07,b$08,b$09,b$0a,b$0b,b$0c,b$0d,b$0e,b$0f,b$00,b$01
;b$40,b$81,b$c2,b$03,b$44,b$85,b$c6,b$07,b$48,b$89,b$ca,b$0b,b$4c,b$8d,b$ce,b$0f
;b$41,b$82,b$c3,b$04,b$45,b$86,b$c7,b$08,b$49,b$8a,b$cb,b$0c,b$4d,b$8e,b$cf,b$00
;b$42,b$83,b$c4,b$05,b$46,b$87,b$c8,b$09,b$4a,b$8b,b$cc,b$0d,b$4e,b$8f,b$c0,b$01

; Debug tile data for the sphinx portion of the video RAM
;s$24008000
;b$01,b$01,b$02,b$00,b$04,b$05,b$06,b$07,b$08,b$00,b$0a,b$0b,b$0c,b$0d,b$0e,b$00
;b$01,b$02,b$03,b$04,b$00,b$06,b$07,b$08,b$00,b$0a,b$00,b$0c,b$0d,b$0e,b$00,b$01
;b$01,b$01,b$02,b$03,b$04,b$00,b$06,b$00,b$08,b$09,b$0a,b$00,b$0c,b$00,b$0e,b$0f
;b$01,b$02,b$03,b$04,b$05,b$06,b$00,b$08,b$09,b$0a,b$0b,b$0c,b$00,b$0e,b$0f,b$01
;s$24c08000
;b$01,b$01,b$02,b$03,b$04,b$05,b$06,b$07,b$08,b$09,b$0a,b$0b,b$0c,b$0d,b$0e,b$0f
;b$01,b$02,b$03,b$04,b$05,b$06,b$07,b$08,b$09,b$0a,b$0b,b$0c,b$0d,b$0e,b$0f,b$01
;b$01,b$01,b$02,b$03,b$04,b$05,b$06,b$07,b$08,b$09,b$0a,b$0b,b$0c,b$0d,b$0e,b$0f
;b$01,b$02,b$03,b$04,b$05,b$06,b$07,b$08,b$09,b$0a,b$0b,b$0c,b$0d,b$0e,b$0f,b$01

; Debug colour data for the sphinx portion
;s$25008000
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;s$25c08000
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01


; Write tile data from 08_r08t.bin into RAM mapped at $2000 with EBS $40
s$20004000
<0,1,2,3,4,5,6,7,<08_r08t.bin

; Write tile data from 07_n08t.bin into RAM mapped at $4000 with EBS $40
s$40004000
<0,1,2,3,4,5,6,7,<07_n08t.bin

; Write tile data from 06_l08t.bin into RAM mapped at $8000 with EBS $40
s$80004000
<0,1,2,3,4,5,6,7,<06_l08t.bin


; Character data
; Write character data from 05_k08t.bin into RAM mapped at $2000 with EBS $20
s$20002000
<0,1,2,3,4,5,6,7,<05_k08t.bin

; Write character data from 04_h08t.bin into RAM mapped at $4000 with EBS $20
s$40002000
<0,1,2,3,4,5,6,7,<04_h08t.bin

; Write character data from 03_e08t.bin into RAM mapped at $8000 with EBS $20
s$80002000
<0,1,2,3,4,5,6,7,<03_e08t.bin


; Sprite data
; Write sprite data from 14_j07b.bin into RAM mapped at $2000 with EBS $10
s$20001000
<0,1,2,3,4,5,6,7,<14_j07b.bin

; Write sprite data from 15_l07b.bin into RAM mapped at $4000 with EBS $10
s$40001000
<0,1,2,3,4,5,6,7,<15_l07b.bin

; Write sprite data from 16_m07b.bin into RAM mapped at $8000 with EBS $10
s$80001000
<0,1,2,3,4,5,6,7,<16_m07b.bin

!PaletteData.txt


; Write screen data into RAM mapped at $9000 with EBS $01
s$90400100
; Screen data
b$41,b$42,b$43,b$44,b$45,b$46,b$47,b$48,b$49,b$4a,b$4b,b$4c,b$4d,b$4e,b$4f,b$50
s$91000100
b$11,b$22,b$33,b$44,b$55,b$66,b$77,b$88,b$99,b$aa,b$bb,b$cc,b$dd,b$ee,b$ff,b$10
s$92000100
b$41,b$42,b$43,b$44,b$45,b$46,b$47,b$48,b$49,b$4a,b$4b,b$4c,b$4d,b$4e,b$4f,b$50
s$93000100
b$11,b$22,b$33,b$44,b$55,b$66,b$77,b$88,b$99,b$aa,b$bb,b$cc,b$dd,b$ee,b$ff,b$10

; Write colour data into RAM mapped at $9400 with EBS $01
; Colour data
s$94400100
; Demonstrating various flips and also the extended character set using hi-nybble 1/2
b$01,b$02,b$13,b$14,b$15,b$16,b$37,b$18,b$49,b$4a,b$8b,b$8c,b$cd,b$ce,b$cf,b$c0
s$95000100
b$01,b$22,b$33,b$04,b$05,b$06,b$07,b$08,b$09,b$0a,b$0b,b$0c,b$0d,b$0e,b$0f,b$00
s$96000100
b$01,b$02,b$03,b$04,b$05,b$06,b$07,b$08,b$09,b$0a,b$0b,b$0c,b$0d,b$0e,b$0f,b$00
s$97000100
b$01,b$22,b$33,b$04,b$05,b$06,b$07,b$08,b$09,b$0a,b$0b,b$0c,b$0d,b$0e,b$0f,b$00


; For the 512x256 test only
; Write screen data into RAM mapped at $8000 with EBS $01
s$80800100
; Screen data
b$41,b$42,b$43,b$44,b$45,b$46,b$47,b$48,b$49,b$4a,b$4b,b$4c,b$4d,b$4e,b$4f,b$50
s$81500100
b$11,b$22,b$33,b$44,b$55,b$66,b$77,b$88,b$99,b$aa,b$bb,b$cc,b$dd,b$ee,b$ff,b$10
s$85600100
b$41,b$42,b$43,b$44,b$45,b$46,b$47,b$48,b$49,b$4a,b$4b,b$4c,b$4d,b$4e,b$4f,b$50
s$86700100
b$11,b$22,b$33,b$44,b$55,b$66,b$77,b$88,b$99,b$aa,b$bb,b$cc,b$dd,b$ee,b$ff,b$10

; Write colour data into RAM mapped at $8800 with EBS $01
; Colour data
s$88800100
; Demonstrating various flips and also the extended character set using hi-nybble 1/2
b$01,b$02,b$13,b$14,b$15,b$16,b$37,b$18,b$49,b$4a,b$8b,b$8c,b$cd,b$ce,b$cf,b$c0
s$89500100
b$01,b$22,b$33,b$04,b$05,b$06,b$07,b$08,b$09,b$0a,b$0b,b$0c,b$0d,b$0e,b$0f,b$00
s$8d600100
b$01,b$02,b$03,b$04,b$05,b$06,b$07,b$08,b$09,b$0a,b$0b,b$0c,b$0d,b$0e,b$0f,b$00
s$8e700100
b$01,b$22,b$33,b$04,b$05,b$06,b$07,b$08,b$09,b$0a,b$0b,b$0c,b$0d,b$0e,b$0f,b$00


; Write some debug character set data from the C64
; This shows the screen orientation wrt to the pixel data in RAM is as expected.
; VSMDD1 then does not need the rotation flag set. Using WIDTH=768 and HEIGHT=384 also helps with the aspect ratio
;s$20002000
;<0,1,2,3,4,5,6,7,<C:\VICE\C64\chargen
;s$40002000
;<0,1,2,3,4,5,6,7,<C:\VICE\C64\chargen
;s$80002000
;<0,1,2,3,4,5,6,7,<C:\VICE\C64\chargen

;s$94400100
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01

;s$90400100
;b$00,b$00,b$00,b$00,b$00,b$00,b$00,b$00,b$00,b$00,b$00,b$00,b$00,b$00,b$00,b$00
;b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01,b$01
;b$02,b$02,b$02,b$02,b$02,b$02,b$02,b$02,b$02,b$02,b$02,b$02,b$02,b$02,b$02,b$02
;b$03,b$03,b$03,b$03,b$03,b$03,b$03,b$03,b$03,b$03,b$03,b$03,b$03,b$03,b$03,b$03
;b$04,b$04,b$04,b$04,b$04,b$04,b$04,b$04,b$04,b$04,b$04,b$04,b$04,b$04,b$04,b$04
;b$05,b$05,b$05,b$05,b$05,b$05,b$05,b$05,b$05,b$05,b$05,b$05,b$05,b$05,b$05,b$05
;b$06,b$06,b$06,b$06,b$06,b$06,b$06,b$06,b$06,b$06,b$06,b$06,b$06,b$06,b$06,b$06
;b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20
;b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20
;b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20
;b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20
;b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20
;b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20
;b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20
;b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20
;b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20
;b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20
;b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20
;b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20
;b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20
;b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20,b$20



; Start and end (exclusive) of double size 32x32 sprite index
s$9a000100
b$1c,b$0f
;b$10,b$00

; Write sprite register data into RAM mapped at $9820 with EBS $01
s$98200100
; Hires mode sprite registers start at $9840
;s$98400100


; Byte ordering
; frame
; palette
; Rotated
; x
; y
; Normal
; y (inverted)
; x

; Top middle of normal screen, all the same frame, palette and flips
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00
;b$14,b$04,b$80,b$00


; Spread out all over the screen
b$28,b$01,b$38,b$10
b$29,b$01,b$3a,b$20
b$2a,b$01,b$3c,b$30
b$2b,b$01,b$3e,b$40

b$14,b$42,b$80,b$41
b$15,b$42,b$80,b$52
b$16,b$42,b$c0,b$63
b$17,b$42,b$c0,b$74

; Enables full height mode
b$18,b$62,b$10,b$81
b$19,b$62,b$10,b$92
b$1a,b$62,b$80,b$a3
b$1b,b$62,b$80,b$b4

b$1f,b$00,b$40,b$b0
b$1f,b$40,b$60,b$c1
b$1f,b$80,b$80,b$d2
b$1f,b$c0,b$a0,b$e3


b$20,b$c3,b$10,b$f1
b$21,b$01,b$11,b$12
b$22,b$81,b$88,b$23
b$23,b$42,b$88,b$34

b$24,b$42,b$88,b$41
b$25,b$42,b$80,b$52
b$26,b$42,b$c8,b$63
b$27,b$42,b$c0,b$74


; Extra sprite register data, for 48 sprite tests with 512x256 resolution, with proposed MSB bit set (0x10)
;b$1f,b$10,b$10,b$40
;b$1f,b$51,b$21,b$41
;b$1f,b$92,b$32,b$42
;b$1f,b$d3,b$43,b$43
;
;b$1f,b$10,b$20,b$50
;b$1f,b$51,b$31,b$51
;b$1f,b$92,b$42,b$52
;b$1f,b$d3,b$53,b$53
;
;b$1f,b$10,b$30,b$60
;b$1f,b$51,b$41,b$61
;b$1f,b$92,b$52,b$62
;b$1f,b$d3,b$63,b$63
;
;b$1f,b$10,b$40,b$70
;b$1f,b$51,b$51,b$71
;b$1f,b$92,b$62,b$72
;b$1f,b$d3,b$73,b$73
;
;b$1f,b$10,b$50,b$80
;b$1f,b$51,b$61,b$81
;b$1f,b$92,b$72,b$82
;b$1f,b$d3,b$83,b$83
;
;b$1f,b$10,b$60,b$90
;b$1f,b$51,b$71,b$91
;b$1f,b$92,b$82,b$92
;b$1f,b$d3,b$93,b$93


; Top left of rotated screen, all the same
;b$14,b$40,b$10,b$00
;b$15,b$43,b$10,b$00
;b$16,b$40,b$10,b$00
;b$17,b$43,b$10,b$00
;
;b$1f,b$04,b$10,b$00
;b$1f,b$45,b$10,b$00
;b$1f,b$86,b$10,b$00
;b$1f,b$c7,b$10,b$00
;
;b$28,b$08,b$10,b$00
;b$29,b$09,b$10,b$00
;b$2a,b$0a,b$10,b$00
;b$2b,b$0b,b$10,b$00
;
;b$18,b$4c,b$10,b$00
;b$19,b$4d,b$10,b$00
;b$1a,b$4e,b$10,b$00
;b$1b,b$4f,b$10,b$00
;
;
;b$20,b$c3,b$10,b$00
;b$21,b$01,b$10,b$00
;b$22,b$81,b$10,b$00
;b$23,b$42,b$10,b$00
;
;b$24,b$42,b$10,b$00
;b$25,b$42,b$10,b$00
;b$26,b$42,b$10,b$00
;b$27,b$42,b$10,b$00



; X pos group
;b$1f,b$00,b$b0,b$40
;b$1f,b$41,b$b1,b$41
;b$1f,b$82,b$b2,b$42
;b$1f,b$c3,b$b3,b$43
;
;b$1f,b$00,b$b0,b$50
;b$1f,b$41,b$b1,b$51
;b$1f,b$82,b$b2,b$52
;b$1f,b$c3,b$b3,b$53
;
;b$1f,b$00,b$b0,b$60
;b$1f,b$41,b$b1,b$61
;b$1f,b$82,b$b2,b$62
;b$1f,b$c3,b$b3,b$63
;
;b$1f,b$00,b$b0,b$70
;b$1f,b$41,b$b1,b$71
;b$1f,b$82,b$b2,b$72
;b$1f,b$c3,b$b3,b$73
;
;b$1f,b$00,b$b0,b$80
;b$1f,b$41,b$b1,b$81
;b$1f,b$82,b$b2,b$82
;b$1f,b$c3,b$b3,b$83
;
;b$1f,b$00,b$b0,b$90
;b$1f,b$41,b$b1,b$91
;b$1f,b$82,b$b2,b$92
;b$1f,b$c3,b$b3,b$93



; Y pos group
;b$1f,b$00,b$40,b$b0
;b$1f,b$41,b$41,b$b1
;b$1f,b$82,b$42,b$b2
;b$1f,b$c3,b$43,b$b3
;
;b$1f,b$00,b$50,b$b0
;b$1f,b$41,b$51,b$b1
;b$1f,b$82,b$52,b$b2
;b$1f,b$c3,b$53,b$b3
;
;b$1f,b$00,b$60,b$b0
;b$1f,b$41,b$61,b$b1
;b$1f,b$82,b$62,b$b2
;b$1f,b$c3,b$63,b$b3
;
;b$1f,b$00,b$70,b$b0
;b$1f,b$41,b$71,b$b1
;b$1f,b$82,b$72,b$b2
;b$1f,b$c3,b$73,b$b3
;
;b$1f,b$00,b$80,b$b0
;b$1f,b$41,b$81,b$b1
;b$1f,b$82,b$82,b$b2
;b$1f,b$c3,b$83,b$b3
;
;b$1f,b$00,b$90,b$b0
;b$1f,b$41,b$91,b$b1
;b$1f,b$82,b$92,b$b2
;b$1f,b$c3,b$93,b$b3



; Background image enable and index, shrink border X and Y
;d$9e0001f2
; Background image enable and index, shrink right border
;d$9e000172
; Background image enable and index, shrink bottom border
;d$9e0001b2

; Background image enable and index
d$9e000132
;d$9e000133
;d$9e000134
;d$9e000130


!TestTileDisableRapidColours.txt
!TestSpriteRegisterOffscreen.txt

d$0

; Wait for _VBLANK and shrink borders
^-$01
; Note the zero data after the wait, this helps with timings of the following memory writes as the display finally releases the bus
d$0
d$9e0001f2
; Also start moving a sprite
d$98420139
b$11
d$0

;!TestTileScrolls.txt


; Switch back to normal screen and include the animation data
; Interesting to note that on the right hand edge the colour bars do still show ~4 pixels of change and the tile screen has some small issues with colours.
; This could indicate a limit to the maths at those positions, it also indicates the pixel output is not quite matched with 0x180.
;d$9e000132
;d$9e000120	; Disable the tile screen
!GenerateData\AnimationData.txt

; 48 frames of animation
; This also tests the EBS bus sharing model
; Wait for _VBLANK and scroll the screen in the horizontal direction (rotated screen means it looks like a vertical scroll)
d$0
^-$01
d$0
d$9e0001f2
d$9e010108
d$9e020100
d$9e030100

d$9e010111
d$98420139
b$11
d$0
^-$01
d$0
d$9e010122
d$9842013a
b$12
d$0
^-$01
d$0
d$9e010133
d$9842013b
b$13
d$0
^-$01
d$0
d$9e010144
d$9842013c
b$14
d$0
^-$01
d$0
d$9e010155
d$9842013d
b$15
d$0
^-$01
d$0
d$9e010166
d$9842013e
b$16
d$0
^-$01
d$0
d$9e010177
d$9842013f
b$17
d$0
^-$01
d$0
d$9e010188
d$98420140
b$18
d$0
^-$01
d$0
d$9e010199
d$98420141
b$19
d$0
^-$01
d$0
d$9e0101aa
d$98420142
b$1a
d$0
^-$01
d$0
d$9e0101bb
d$98420143
b$1b
d$0
^-$01
d$0
d$9e0101cc
d$98420144
b$1c
d$0
^-$01
d$0
d$9e0101dd
d$98420145
b$1d
d$0
^-$01
d$0
d$9e0101ee
d$98420146
b$1e
d$0
^-$01
d$0
d$9e0101ff
d$98420147
b$1f
d$0
^-$01
d$0
;d$9e0001f3	; Next screen bank
d$9e0101e0
d$9e020101	; Next tile over
d$98420148
b$20
d$0
^-$01
d$0
d$9e0101d1
d$98420149
b$21
d$0
^-$01
d$0
d$9e0101c2
d$98420149
b$21
d$0
^-$01
d$0
d$9e0101b3
d$9842014a
b$22
d$0
^-$01
d$0
d$9e0101a4
d$9842014b
b$21
d$0
^-$01
d$0
d$9e010195
d$9842014c
b$22
d$0
^-$01
d$0
d$9e010186
d$9842014d
b$23
d$0
^-$01
d$0
d$9e010177
d$9842014e
b$24
d$0
^-$01
d$0
d$9e010168
d$9842014f
b$25
d$0
^-$01
d$0
d$9e010159
d$98420150
b$26
d$0
^-$01
d$0
d$9e01014a
d$98420151
b$27
d$0
^-$01
d$0
d$9e01013b
d$98420152
b$28
d$0
^-$01
d$0
d$9e01012c
d$98420153
b$29
d$0
^-$01
d$0
d$9e01011d
d$98420154
b$2a
d$0
^-$01
d$0
d$9e01010e
d$98420155
b$2b
d$0
^-$01
d$0
d$9e01010f
d$98420156
b$2c
d$0
^-$01
d$0
;d$9e0001f4	; Next screen bank
d$9e010100
d$9e020102	; Next tile over
d$98420157
b$2d
d$0

^-$01
d$0
d$9e010101
d$0
^-$01
d$0
d$9e010102
d$0
^-$01
d$0
d$9e010103
d$0
^-$01
d$0
d$9e010104
d$0
^-$01
d$0
d$9e010105
d$0
^-$01
d$0
d$9e010106
d$0
^-$01
d$0
d$9e010107
d$0
^-$01
d$0
d$9e010108
d$0
^-$01
d$0
d$9e010109
d$0
^-$01
d$0
d$9e01010a
d$0
^-$01
d$0
d$9e01010b
d$0
^-$01
d$0
d$9e01010c
d$0
^-$01
d$0
d$9e01010d
d$0
^-$01
d$0
d$9e01010e
d$0
^-$01
d$0
d$9e01010f
d$0
