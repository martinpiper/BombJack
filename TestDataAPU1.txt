; Blank (address $0000)
d0

; Address auto-increment using data bits 16-31
+16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,+
<0,1,2,3,4,5,6,7,<

; Write control registers
; Reset APU
d$20000400
d$20000401

; PC		12 bits of APU PC (the other half of the 8 KB RAM is used for potential decision points, conditional branching instructions)
; A			8 bit register
; WAIT		32 bit value to wait for when comparing RHRV (and other signals)
; ADDRB1	16 bit current address for APU memory bank 1 data
; APUEBS	8 bit value containing the EBS
; APUEADDR	16 bit value for the external memory bus

s$80000400
<0,1,2,3,4,5,6,7,<TestAPU1.bin


; Store data into APU memory bank 1 data
s$40000400

; Sprite register EBS+address
b$01
b$20
b$98

; Value to store in $9820
b$11
; Next RHRV to wait for
b$f8,b$01,b$81
; Value to store in $9821
b$12




; Enable APU after writing memory
d$20000403

; Test memory access APU delay
s$82000400
b$01,b$02,b$03,b$04,b$05,b$06,b$07
;s$41000400
;b$11,b$12,b$13,b$14,b$15,b$16,b$17
d$0

; Now try waiting for a pixel before the APU trigger and using memory writes to test the APU delay processing logic
d$0
w$ff01ff00,$0001ff00
d$0

; Test memory access APU delay during scan
;s$82100400
;b$01,b$02,b$03,b$04,b$05,b$06,b$07
;s$41100400
;b$11,b$12,b$13,b$14,b$15,b$16,b$17
d$0
