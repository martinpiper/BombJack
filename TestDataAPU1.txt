; Blank (address $0000)
d0

; Address auto-increment using data bits 16-31
+16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,+
<0,1,2,3,4,5,6,7,<

; Write control registers
; Reset APU
d$20000200
d$20000201

; PC		12 bits of APU PC (the other half of the 8 KB RAM is used for potential decision points, conditional branching instructions)
; A			8 bit register
; WAIT		32 bit value to wait for when comparing RHRV (and other signals)
; ADDRB1	16 bit current address for APU memory bank 1 data
; APUEBS	8 bit value containing the EBS
; APUEADDR	16 bit value for the external memory bus

s$80000200
<0,1,2,3,4,5,6,7,<TestAPU1.bin


; Store data into APU memory bank 1 data
s$40000200
b$00

; kAPU_PCLoad16 address $0010
b$10,b$00

; For kAPU_SkipIfEQ check
b$00

; ADDRB2 address
b$08,b$02

; Sprite register EBS+address
b$01
b$20
b$98

; Value to store in $9820
b$11
; Next RHRV to wait for
b$f8,b$01,b$61
; Value to store in $9821
b$12

; Then reset address back to $9820
b$20
; And values to write back
b$01
b$01

; For memory read and write checking
; For skip
b$ff
; New address to start storing to
b$01
b$00
b$98


; Enable APU after writing memory
d$20000203

; Test memory access APU delay straight after APU enable
s$9f000200
b$01
b$01,b$02,b$03,b$04,b$05,b$06,b$07
s$41000200
b$11,b$12,b$13,b$14,b$15,b$16,b$17
d$0

; Now try waiting for a pixel before the APU trigger and using memory writes to test the APU delay processing logic
d$0
w$ff01ff00,$f8015000
d$0

; Test memory access APU delay during scan
s$9f100200
b$01,b$02,b$03,b$04,b$05,b$06,b$07
s$41100200
b$11,b$12,b$13,b$14,b$15,b$16,b$17

d$0


; For kAPU_SkipIfEQ check
d$0
w$ff01ff00,$f8015000
d$0

; Causes the PC to reset and loop around with kAPU_SkipIfEQ check
d$40030201

d$0

; For kAPU_SkipIfEQ check
d$0
w$ff01ff00,$f8015000
d$0

; Cause a known value, still NE, to be written to the debug output
d$400302ff

; For kAPU_SkipIfEQ check
d$0
w$ff01ff00,$f8015000
d$0

; Should not see any sprite writes between these two frames
d$40030201

d$0

; For kAPU_SkipIfEQ check
d$0
w$ff01ff00,$f8015000
d$0

; Causes the PC to skip the reset and not loop around with kAPU_SkipIfEQ check
d$40030200

d$0


; Now execute a few frames
^-$01
d$0
^-$01
d$0

; Last kAPU_SkipIfEQ test enable
d$40110200

; Wait sync
; Wow, interesting bug, if this is not d$0 before the edge wait then **two bytes** at $4011 and $4012 from the previous write are cleared...
;d$0
;^-$01
;d$0

; Needs the double wait because RV=0xf9 happens twice
d$0
w$ff01ff00,$f9001100
d$0
w$ff01ff00,$f9001100
d$0
d$421002fe

d$0
w$ff01ff00,$f9004100
d$0
; Why does this write fail?
d$421002fd


; Last clear the bus
d$0
