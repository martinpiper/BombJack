; ..\c64\acme.exe -v4 --msvc "TestAPU1.a"

; This test is bare minimal functionality for a copper, where values can be read from ADDRB1 RAM, HV waits, then external memory writes, and a final PC reset

!source "stdlib/APU_Macros.a"

!to "TestAPU1.bin" , plain

*=0
	+MAPU
	+MAPU kAPU_Reset_ADDRB1
	+MAPU kAPU_Reset_EBSEADDR

	; Test PC load
	+MAPU kAPU_IDataRegLoad0
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_IDataRegLoad1
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_PCLoad16

	; This should never execute due to the above PC load
	+MAPU
	+MAPU kAPU_Reset_PC

	; Padding for the PC load to hit somewhere in
	+MAPU
	+MAPU
	+MAPU
	+MAPU
	+MAPU
	+MAPU
	+MAPU
	+MAPU
	
	; Will be skipped since the memory is 0
	+MAPU kAPU_SkipIfEQ | kAPU_Reset_PC
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_EBS
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_EADDRLo
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_EADDRHi
	+MAPU kAPU_Incr_ADDRB1

;	+MAPU kAPU_WaitForEqualsHV
	
	+MAPU kAPU_InterceptBus | kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Incr_EADDR

	+MAPU kAPU_Load_Wait24
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_Wait16
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_Wait8
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_WaitForEqualsHV

	+MAPU kAPU_InterceptBus | kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Incr_EADDR

	; Then overwrite $9820 with two bytes
	+MAPU kAPU_Load_EADDRLo
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_InterceptBus | kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1 | kAPU_Incr_EADDR

	+MAPU kAPU_InterceptBus | kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1 | kAPU_Incr_EADDR


	+MAPU kAPU_Reset_ADDRB1 | kAPU_Reset_PC
	+MAPU

