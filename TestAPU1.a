; cd /d C:\Work\BombJack
; ..\c64\acme.exe -v4 --msvc "TestAPU1.a"

; This test is bare minimal functionality for a copper, where values can be read from ADDRB1 RAM, HV waits, then external memory writes, and a final PC reset

!source "stdlib/APU_Macros.a"

!to "TestAPU1.bin" , plain

*=0
	+MAPU
	; This empirically demonstrates the kAPU_Incr_ADDRB1 happens *just* after the kAPU_Reset_ADDRB1 completes its clear
	; However this timing is generally unsafe, don't rely on it.
	+MAPU kAPU_Reset_ADDRB1 | kAPU_Incr_ADDRB1
	+MAPU 

	; Test PC load
	; This empirically demonstrates the kAPU_Incr_ADDRB1 happens after the kAPU_IDataRegLoad0 pulse
	+MAPU kAPU_IDataRegLoad0 | kAPU_IDataRegLoad2 | kAPU_Incr_ADDRB1
	+MAPU 
	+MAPU kAPU_IDataRegLoad1 | kAPU_IDataRegLoad3 | kAPU_Incr_ADDRB1
	+MAPU
	+MAPU kAPU_PCLoad16

	; This should never execute due to the above PC load
	+MAPU
	+MAPU kAPU_Reset_PC

	; Padding for the PC load to hit somewhere in
	+MAPU

	+MAPU
	+MAPU
	+MAPU
	+MAPU
	+MAPU
	+MAPU
	+MAPU
	
	; Will be eventually skipped since the memory is eventually set to 0
	+MAPU kAPU_SkipIfEQ | kAPU_Reset_PC
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_IDataRegLoad0
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_IDataRegLoad1
	+MAPU kAPU_Incr_ADDRB1
	+MAPU kAPU_ADDRB2Load16


	+MAPU kAPU_Load_EBS
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_EADDRLo
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_EADDRHi
	+MAPU kAPU_Incr_ADDRB1

;	+MAPU kAPU_WaitForEqualsHV
	
	+MAPU kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Incr_EADDR

	+MAPU kAPU_Load_Wait24
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_Wait16
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_Wait8
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_WaitForEqualsHV

	+MAPU kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Incr_EADDR



	; Write values back to internal data memory
	; Note the kAPU_IDataSelect needs to be stable before the write
	+MAPU kAPU_IDataSelectReg3
	+MAPU kAPU_ADDRB2Select | kAPU_InternalMEWR | kAPU_IDataSelectReg3
	+MAPU kAPU_Incr_ADDRB2
	+MAPU kAPU_IDataSelectReg2
	+MAPU kAPU_ADDRB2Select | kAPU_InternalMEWR | kAPU_IDataSelectReg2
	+MAPU kAPU_Incr_ADDRB2
	+MAPU kAPU_IDataSelectReg1
	+MAPU kAPU_ADDRB2Select | kAPU_InternalMEWR | kAPU_IDataSelectReg1
	+MAPU kAPU_Incr_ADDRB2
	+MAPU kAPU_IDataSelectReg0
	+MAPU kAPU_ADDRB2Select | kAPU_InternalMEWR | kAPU_IDataSelectReg0
	+MAPU kAPU_Incr_ADDRB2

	; Since r0/r1 have not changed
	+MAPU kAPU_ADDRB2Load16


	; Then overwrite $9820 with two bytes
	+MAPU kAPU_Load_EADDRLo
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1 | kAPU_Incr_EADDR

	+MAPU kAPU_ExternalMEWR
	+MAPU kAPU_Incr_ADDRB1 | kAPU_Incr_EADDR

	; Write values back to internal data memory
	; Note the kAPU_IDataSelect needs to be stable before the write
	+MAPU kAPU_IDataSelectReg3
	+MAPU kAPU_ADDRB2Select | kAPU_InternalMEWR | kAPU_IDataSelectReg0
	+MAPU kAPU_Incr_ADDRB2
	+MAPU kAPU_IDataSelectReg1
	+MAPU kAPU_ADDRB2Select | kAPU_InternalMEWR | kAPU_IDataSelectReg1
	+MAPU kAPU_Incr_ADDRB2
	+MAPU kAPU_IDataSelectReg2
	+MAPU kAPU_ADDRB2Select | kAPU_InternalMEWR | kAPU_IDataSelectReg2
	+MAPU kAPU_Incr_ADDRB2
	+MAPU kAPU_IDataSelectReg3
	+MAPU kAPU_ADDRB2Select | kAPU_InternalMEWR | kAPU_IDataSelectReg3
	+MAPU kAPU_Incr_ADDRB2

	+MAPU
	+MAPU kAPU_SkipIfEQ | kAPU_Reset_PC
	+MAPU

	+MAPU kAPU_Incr_ADDRB1

	; After a while, start executing a lot of memory reads and writes
	+MAPU kAPU_WaitForEqualsHV

	+MAPU kAPU_Load_EBS
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_EADDRLo
	+MAPU kAPU_Incr_ADDRB1

	+MAPU kAPU_Load_EADDRHi
	+MAPU kAPU_Incr_ADDRB1

	; Get some known data
	+MAPU kAPU_Reset_ADDRB1
	+MAPU
	+MAPU kAPU_Incr_ADDRB1
	+MAPU

!for .i , 700 {
	+MAPU kAPU_ExternalMEWR
	+MAPU kAPU_Incr_EADDR
}

	+MAPU kAPU_Reset_PC
	+MAPU
